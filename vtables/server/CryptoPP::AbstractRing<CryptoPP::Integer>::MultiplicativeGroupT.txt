VTable for CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>:
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::~AbstractRing()
VTable for CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT:
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::~MultiplicativeGroupT()
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Identity() const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Inverse(CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::Integer>::InversionIsFast() const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Double(CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::ScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::CascadeScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::SimultaneousMultiply(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
VTable for CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT:
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::~MultiplicativeGroupT()
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Equal(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Identity() const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Add(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Inverse(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::InversionIsFast() const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Double(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Subtract(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Accumulate(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::Reduce(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::ScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::CascadeScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroupT::SimultaneousMultiply(CryptoPP::PolynomialMod2*, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const*, unsigned int) const
VTable for CryptoPP::AbstractRing<CryptoPP::Integer>:
    CryptoPP::AbstractRing<CryptoPP::Integer>::~AbstractRing()
