VTable for CSingleplayRules:
    CBaseGameSystemPerFrame::Init()
    CBaseGameSystemPerFrame::PostInit()
    CBaseGameSystemPerFrame::Shutdown()
    CBaseGameSystemPerFrame::LevelInitPreEntity()
    CBaseGameSystemPerFrame::LevelInitPostEntity()
    CBaseGameSystemPerFrame::LevelShutdownPreClearSteamAPIContext()
    CBaseGameSystemPerFrame::LevelShutdownPreEntity()
    CGameRules::LevelShutdownPostEntity()
    CBaseGameSystemPerFrame::OnSave()
    CBaseGameSystemPerFrame::OnRestore()
    CBaseGameSystemPerFrame::SafeRemoveIfDesired()
    CBaseGameSystemPerFrame::IsPerFrame()
    CSingleplayRules::~CSingleplayRules()
    CSingleplayRules::~CSingleplayRules()
    CBaseGameSystemPerFrame::FrameUpdatePreEntityThink()
    CGameRules::FrameUpdatePostEntityThink()
    CBaseGameSystemPerFrame::PreClientUpdate()
    CSingleplayRules::Damage_IsTimeBased(int)
    CSingleplayRules::Damage_ShouldGibCorpse(int)
    CSingleplayRules::Damage_ShowOnHUD(int)
    CSingleplayRules::Damage_NoPhysicsForce(int)
    CSingleplayRules::Damage_ShouldNotBleed(int)
    CSingleplayRules::Damage_GetTimeBased()
    CSingleplayRules::Damage_GetShouldGibCorpse()
    CSingleplayRules::Damage_GetShowOnHud()
    CSingleplayRules::Damage_GetNoPhysicsForce()
    CSingleplayRules::Damage_GetShouldNotBleed()
    CSingleplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
    CSingleplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
    CGameRules::ShouldCollide(int, int)
    CGameRules::DefaultFOV()
    CGameRules::GetViewVectors() const
    CGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
    CGameRules::GetDamageMultiplier()
    CSingleplayRules::IsMultiplayer()
    CGameRules::GetEncryptionKey()
    CGameRules::InRoundRestart()
    CGameRules::AllowThirdPersonCamera()
    CGameRules::ClientCommandKeyValues(edict_t*, KeyValues*)
    CGameRules::IsConnectedUserInfoChangeAllowed(CBasePlayer*)
    CGameRules::Status(void (*)(char const*, ...))
    CGameRules::GetTaggedConVarList(KeyValues*)
    CGameRules::CheckHaptics(CBasePlayer*)
    CGameRules::LevelShutdown()
    CGameRules::Precache()
    CGameRules::RefreshSkillData(bool)
    CSingleplayRules::Think()
    CSingleplayRules::IsAllowedToSpawn(CBaseEntity*)
    CGameRules::EndGameFrame()
    CGameRules::IsSkillLevel(int)
    CGameRules::GetSkillLevel()
    CGameRules::OnSkillLevelChanged(int)
    CGameRules::SetSkillLevel(int)
    CSingleplayRules::FAllowFlashlight()
    CSingleplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
    CSingleplayRules::IsDeathmatch()
    CGameRules::IsTeamplay()
    CSingleplayRules::IsCoOp()
    CGameRules::GetGameDescription()
    CSingleplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
    CSingleplayRules::InitHUD(CBasePlayer*)
    CSingleplayRules::ClientDisconnected(edict_t*)
    CSingleplayRules::FlPlayerFallDamage(CBasePlayer*)
    CGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
    CGameRules::ShouldAutoAim(CBasePlayer*, edict_t*)
    CGameRules::GetAutoAimScale(CBasePlayer*)
    CSingleplayRules::GetAutoAimMode()
    CGameRules::ShouldUseRobustRadiusDamage(CBaseEntity*)
    CGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
    CGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
    CSingleplayRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
    CSingleplayRules::PlayerSpawn(CBasePlayer*)
