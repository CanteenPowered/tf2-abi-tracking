VTable for CBaseMultiplayerPlayer:
    CBaseMultiplayerPlayer::~CBaseMultiplayerPlayer()
    CBaseEntity::SetRefEHandle(CBaseHandle const&)
    CBaseEntity::GetRefEHandle() const
    CBaseEntity::GetCollideable()
    CBaseEntity::GetNetworkable()
    CBaseEntity::GetBaseEntity()
    CBaseEntity::GetModelIndex() const
    CBaseEntity::GetModelName() const
    CBaseEntity::SetModelIndex(int)
    CBasePlayer::GetServerClass()
    CBasePlayer::YouForgotToImplementOrDeclareServerClass()
    CBasePlayer::GetDataDescMap()
    CBaseMultiplayerPlayer::GetScriptDesc()
    CBaseEntity::SetModelIndexOverride(int, int)
    CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    CBaseEntity::ShouldCollide(int, int) const
    CBaseEntity::SetOwnerEntity(CBaseEntity*)
    CBaseEntity::SetScriptOwnerEntity(HSCRIPT__*)
    CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
    CBasePlayer::UpdateTransmitState()
    CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
    CBasePlayer::GetTracerType()
    CBaseMultiplayerPlayer::Spawn()
    CBaseMultiplayerPlayer::Precache()
    CBasePlayer::SetModel(char const*)
    CBaseAnimating::OnNewModel()
    CBaseMultiplayerPlayer::PostConstructor(char const*)
    CBaseEntity::PostClientActive()
    CBaseEntity::ParseMapData(CEntityMapData*)
    CBaseEntity::KeyValue(char const*, char const*)
    CBaseEntity::KeyValue(char const*, float)
    CBaseEntity::KeyValue(char const*, Vector const&)
    CBaseEntity::GetKeyValue(char const*, char*, int)
    CBasePlayer::Activate()
    CBaseEntity::SetParent(CBaseEntity*, int)
    CBasePlayer::ObjectCaps()
    CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    CBasePlayer::DrawDebugGeometryOverlays()
    CBaseAnimating::DrawDebugTextOverlays()
    CBasePlayer::Save(ISave&)
    CBasePlayer::Restore(IRestore&)
    CBasePlayer::ShouldSavePhysics()
    CBaseEntity::OnSave(IEntitySaveUtils*)
    CBasePlayer::OnRestore()
    CBasePlayer::RequiredEdictIndex()
    CBaseEntity::MoveDone()
    CBaseEntity::Think()
    CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
    CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
    CBaseAnimating::GetBaseAnimating()
    CBaseMultiplayerPlayer::GetResponseSystem()
    CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char const*)
    CBasePlayer::Classify()
    CBaseEntity::DeathNotice(CBaseEntity*)
    CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    CBaseEntity::GetAutoAimRadius()
    CBaseEntity::GetAutoAimCenter()
    CBaseEntity::GetBeamTraceFilter()
    CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
    CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    CBasePlayer::TakeHealth(float, int)
    CBaseEntity::IsAlive()
    CBasePlayer::Event_Killed(CTakeDamageInfo const&)
    CBasePlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    CBaseCombatCharacter::BloodColor()
    CBaseEntity::IsTriggered(CBaseEntity*)
    CBaseEntity::IsNPC() const
    CBaseCombatCharacter::MyCombatCharacterPointer()
    CBaseEntity::MyNextBotPointer()
    CBaseEntity::GetDelay()
    CBaseEntity::IsMoving()
    CBaseEntity::DamageDecal(int, int)
    CBaseEntity::DecalTrace(CGameTrace*, char const*)
    CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    CBaseEntity::OnControls(CBaseEntity*)
    CBaseEntity::HasTarget(string_t)
    CBasePlayer::IsPlayer() const
    CBasePlayer::IsNetClient() const
    CBaseEntity::IsTemplate()
    CBaseEntity::IsBaseObject() const
    CBaseEntity::IsBaseTrain() const
    CBaseEntity::IsCombatItem() const
    CBaseEntity::IsProjectileCollisionTarget() const
    CBaseEntity::IsFuncLOD() const
    CBaseEntity::IsBaseProjectile() const
    CBaseEntity::IsBaseCombatWeapon() const
    CBaseEntity::IsWearable() const
    CBaseEntity::MyCombatWeaponPointer()
    CBaseEntity::GetServerVehicle()
    CBaseEntity::IsViewable()
    CBasePlayer::ChangeTeam(int)
    CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    CBaseEntity::CanStandOn(CBaseEntity*) const
    CBaseEntity::CanStandOn(edict_t*) const
    CBaseEntity::GetEnemy()
    CBaseEntity::GetEnemy() const
    CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    CBaseEntity::StartTouch(CBaseEntity*)
    CBasePlayer::Touch(CBaseEntity*)
    CBaseEntity::EndTouch(CBaseEntity*)
    CBaseEntity::StartBlocked(CBaseEntity*)
    CBaseEntity::Blocked(CBaseEntity*)
    CBaseEntity::EndBlocked()
    CBasePlayer::PhysicsSimulate()
    CBasePlayer::UpdateOnRemove()
    CBaseEntity::StopLoopingSounds()
    CBaseEntity::SUB_AllowedToFade()
    CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
    CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
    CBaseEntity::GetTracerAttachment()
    CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    CBasePlayer::DoImpactEffect(CGameTrace&, int)
    CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    CBaseEntity::Respawn()
    CBaseEntity::IsLockedByMaster()
    CBaseEntity::GetMaxHealth() const
    CBaseMultiplayerPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
    CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    CBasePlayer::NetworkStateChanged_m_iHealth()
    CBasePlayer::NetworkStateChanged_m_iHealth(void*)
    CBasePlayer::NetworkStateChanged_m_lifeState()
    CBasePlayer::NetworkStateChanged_m_lifeState(void*)
    CBaseEntity::NetworkStateChanged_m_takedamage()
    CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    CBaseEntity::RunVScripts()
    CBaseEntity::GetDamageType() const
    CBaseEntity::GetDamage()
    CBaseEntity::SetDamage(float)
    CBasePlayer::EyePosition()
    CBasePlayer::EyeAngles()
    CBasePlayer::LocalEyeAngles()
    CBaseEntity::EarPosition()
    CBasePlayer::BodyTarget(Vector const&, bool)
    CBaseEntity::HeadTarget(Vector const&)
    CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    CBaseEntity::GetViewOffset() const
    CBaseEntity::SetViewOffset(Vector const&)
    CBasePlayer::GetSmoothedVelocity()
    CBaseAnimating::GetVelocity(Vector*, Vector*)
    CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
    CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
    CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    CBaseEntity::GetGroundVelocityToApply(Vector&)
    CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    CBaseEntity::Splash()
    CBaseEntity::WorldSpaceCenter() const
    CBaseEntity::GetSoundEmissionOrigin() const
    CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    CBaseEntity::IsDeflectable()
    CBaseEntity::Deflected(CBaseEntity*, Vector&)
    CBaseEntity::CreateVPhysics()
    CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    CBasePlayer::VPhysicsDestroyObject()
    CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
    CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
    CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
    CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    CBaseEntity::VPhysicsIsFlesh()
    CBaseEntity::HasPhysicsAttacker(float)
    CBasePlayer::PhysicsSolidMaskForEntity() const
    CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    CBaseAnimating::GetStepOrigin() const
    CBaseAnimating::GetStepAngles() const
    CBaseEntity::ShouldDrawWaterImpacts()
    CBasePlayer::NetworkStateChanged_m_fFlags()
    CBasePlayer::NetworkStateChanged_m_fFlags(void*)
    CBasePlayer::NetworkStateChanged_m_nWaterLevel()
    CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
    CBasePlayer::NetworkStateChanged_m_hGroundEntity()
    CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
    CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
    CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
    CBasePlayer::NetworkStateChanged_m_flFriction()
    CBasePlayer::NetworkStateChanged_m_flFriction(void*)
    CBasePlayer::NetworkStateChanged_m_vecVelocity()
    CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
    CBasePlayer::NetworkStateChanged_m_vecViewOffset()
    CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
    CBaseEntity::ShouldBlockNav() const
    CBaseEntity::ShouldForceTransmitsForTeam(int)
    CBaseEntity::IsTruceValidForEnt() const
    CBaseEntity::GetDefaultItemChargeMeterValue() const
    CBaseEntity::BCanCallVote()
    CBaseAnimating::GetIdealSpeed() const
    CBaseAnimating::GetIdealAccel() const
    CBaseAnimatingOverlay::StudioFrameAdvance()
    CBaseAnimating::SetSequence(int)
    CBaseAnimating::IsActivityFinished()
    CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    CBaseAnimating::IsRagdoll()
    CBaseAnimating::CanBecomeRagdoll()
    CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    CBaseAnimating::SetupBones(matrix3x4_t*, int)
    CBaseAnimating::CalculateIKLocks(float)
    CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
    CBasePlayer::HandleAnimEvent(animevent_t*)
    CBaseAnimating::PopulatePoseParameters()
    CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    CBaseAnimating::InitBoneControllers()
    CBaseAnimating::GetGroundSpeedVelocity()
    CBasePlayer::RefreshCollisionBounds()
    CBaseAnimating::Ignite(float, bool, float, bool)
    CBaseAnimating::IgniteLifetime(float)
    CBaseAnimating::IgniteNumHitboxFires(int)
    CBaseAnimating::IgniteHitboxFireScale(float)
    CBaseAnimating::Extinguish()
    CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
    CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    CBaseFlex::SetViewtarget(Vector const&)
    CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
    CBaseFlex::ProcessSceneEvents()
    CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
    CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
    CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
    CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
    CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
    CBaseFlex::GetSpecialDSP()
    CBasePlayer::GetPhysicsImpactDamageTable()
    CBaseCombatCharacter::FInViewCone(CBaseEntity*)
    CBaseCombatCharacter::FInViewCone(Vector const&)
    CBaseCombatCharacter::FInAimCone(CBaseEntity*)
    CBaseCombatCharacter::FInAimCone(Vector const&)
    CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
    CBaseCombatCharacter::FindMissTarget()
    CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
    CBasePlayer::BodyAngles()
    CBaseCombatCharacter::BodyDirection2D()
    CBaseCombatCharacter::BodyDirection3D()
    CBaseCombatCharacter::HeadDirection2D()
    CBaseCombatCharacter::HeadDirection3D()
    CBaseCombatCharacter::EyeDirection2D()
    CBaseCombatCharacter::EyeDirection3D()
    CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
    CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
    CBaseCombatCharacter::IsHiddenByFog(float) const
    CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
    CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
    CBaseCombatCharacter::GetFogObscuredRatio(float) const
    CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
    CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
    CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
    CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
    CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
    CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
    CBaseCombatCharacter::GiveAmmo(int, int, bool)
    CBaseCombatCharacter::RemoveAmmo(int, int)
    CBaseCombatCharacter::RemoveAmmo(int, char const*)
    CBaseCombatCharacter::GetAmmoCount(int) const
    CBaseCombatCharacter::NPC_TranslateActivity(Activity)
    CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
    CBaseCombatCharacter::Weapon_FrameUpdate()
    CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
    CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
    CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
    CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
    CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
    CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
    CBasePlayer::Weapon_ShootPosition()
    CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
    CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
    CBaseCombatCharacter::Weapon_GetSlot(int) const
    CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
    CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
    CBaseCombatCharacter::CanBecomeServerRagdoll()
    CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
    CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
    CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
    CBaseCombatCharacter::GetAliveDuration() const
    CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
    CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
    CBaseCombatCharacter::HasEverBeenInjured(int) const
    CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
    CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
    CBaseCombatCharacter::GetDeathActivity()
    CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
    CBaseCombatCharacter::CorpseFade()
    CBaseCombatCharacter::HasHumanGibs()
    CBaseCombatCharacter::HasAlienGibs()
    CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
    CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
    CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
    CBasePlayer::Event_Dying(CTakeDamageInfo const&)
    CBaseCombatCharacter::Event_Dying()
    CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
    CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
    CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
    CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
    CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
    CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
    CBaseCombatCharacter::IRelationType(CBaseEntity*)
    CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
    CBasePlayer::IsInAVehicle() const
    CBasePlayer::GetVehicle()
    CBasePlayer::GetVehicleEntity()
    CBaseCombatCharacter::ExitVehicle()
    CBaseCombatCharacter::RemoveAllWeapons()
    CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
    CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
    CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
    CBasePlayer::DoMuzzleFlash()
    CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
    CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
    CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
    CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
    CBaseCombatCharacter::GetLastKnownArea() const
    CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
    CBaseCombatCharacter::ClearLastKnownArea()
    CBaseCombatCharacter::UpdateLastKnownArea()
    CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
    CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
    CBaseCombatCharacter::OnPursuedBy(INextBot*)
    CBaseCombatCharacter::GetBossType() const
    CBasePlayer::NetworkStateChanged_m_iAmmo()
    CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
    CBasePlayer::CreateViewModel(int)
    CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
    CBasePlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
    CBasePlayer::SharedSpawn()
    CBasePlayer::ForceRespawn()
    CBasePlayer::InitialSpawn()
    CBasePlayer::InitHUD()
    CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
    CBasePlayer::PlayerDeathThink()
    CBasePlayer::Jump()
    CBasePlayer::Duck()
    CBasePlayer::PreThink()
    CBasePlayer::PostThink()
    CBasePlayer::DamageEffect(float, int)
    CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
    CBasePlayer::ShouldFadeOnDeath()
    CBasePlayer::IsFakeClient() const
    CBasePlayer::GetPlayerMins() const
    CBasePlayer::GetPlayerMaxs() const
    CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
    CBasePlayer::PackDeadPlayerItems()
    CBasePlayer::RemoveAllItems(bool)
    CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
    CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
    CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
    CBasePlayer::OnMyWeaponFired(CBaseCombatWeapon*)
    CBasePlayer::GetTimeSinceWeaponFired() const
    CBasePlayer::IsFiringWeapon() const
    CBasePlayer::UpdateClientData()
    CBasePlayer::ExitLadder()
    CBasePlayer::GetLadderSurface(Vector const&)
    CBasePlayer::SetFlashlightEnabled(bool)
    CBasePlayer::FlashlightIsOn()
    CBasePlayer::FlashlightTurnOn()
    CBasePlayer::FlashlightTurnOff()
    CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
    CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
    CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
    CBasePlayer::GetOverrideStepSound(char const*)
    CBasePlayer::GetStepSoundVelocities(float*, float*)
    CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
    CBasePlayer::DeathSound(CTakeDamageInfo const&)
    CBasePlayer::GetSceneSoundToken()
    CBasePlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
    CBasePlayer::SetAnimation(PLAYER_ANIM)
    CBasePlayer::ImpulseCommands()
    CBasePlayer::CheatImpulseCommands(int)
    CBaseMultiplayerPlayer::ClientCommand(CCommand const&)
    CBasePlayer::GetTeamVoteController()
    CBasePlayer::StartObserverMode(int)
    CBasePlayer::StopObserverMode()
    CBasePlayer::ModeWantsSpectatorGUI(int)
    CBasePlayer::SetObserverMode(int)
    CBasePlayer::GetObserverMode()
    CBasePlayer::SetObserverTarget(CBaseEntity*)
    CBasePlayer::ObserverUse(bool)
    CBasePlayer::GetObserverTarget()
    CBasePlayer::FindNextObserverTarget(bool)
    CBasePlayer::GetNextObserverSearchStartPoint(bool)
    CBasePlayer::IsValidObserverTarget(CBaseEntity*)
    CBasePlayer::CheckObserverSettings()
    CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
    CBasePlayer::ForceObserverMode(int)
    CBasePlayer::ResetObserverMode()
    CBasePlayer::ValidateCurrentObserverTarget()
    CBasePlayer::AttemptToExitFreezeCam()
    CBasePlayer::StartReplayMode(float, float, int)
    CBasePlayer::StopReplayMode()
    CBasePlayer::GetDelayTicks()
    CBasePlayer::GetReplayEntity()
    CBasePlayer::CreateCorpse()
    CBasePlayer::EntSelectSpawnPoint()
    CBasePlayer::GetInVehicle(IServerVehicle*, int)
    CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
    CBasePlayer::OnVehicleStart()
    CBasePlayer::OnVehicleEnd(Vector&)
    CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
    CBasePlayer::SelectLastItem()
    CBasePlayer::SelectItem(char const*, int)
    CBasePlayer::ItemPostFrame()
    CBasePlayer::GiveNamedItem(char const*, int)
    CBasePlayer::CheckTrainUpdate()
    CBasePlayer::SetPlayerUnderwater(bool)
    CBasePlayer::CanBreatheUnderwater() const
    CBasePlayer::PlayerUse()
    CBasePlayer::PlayUseDenySound()
    CBasePlayer::FindUseEntity()
    CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
    CBasePlayer::PickupObject(CBaseEntity*, bool)
    CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
    CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
    CBasePlayer::UpdateGeigerCounter()
    CBasePlayer::GetAutoaimVector(float)
    CBasePlayer::GetAutoaimVector(float, float)
    CBasePlayer::GetAutoaimVector(autoaim_params_t&)
    CBasePlayer::ShouldAutoaim()
    CBasePlayer::ForceClientDllUpdate()
    CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
    CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
    CBasePlayer::ChangeTeam(int, bool, bool, bool)
    CBaseMultiplayerPlayer::CanHearAndReadChatFrom(CBasePlayer*)
    CBaseMultiplayerPlayer::CanSpeak()
    CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
    CBasePlayer::CheckChatText(char*, int)
    CBasePlayer::CreateRagdollEntity()
    CBasePlayer::ShouldAnnounceAchievement()
    CBasePlayer::EquipWearable(CEconWearable*)
    CBasePlayer::RemoveWearable(CEconWearable*)
    CBasePlayer::IsFollowingPhysics()
    CBasePlayer::InitVCollision(Vector const&, Vector const&)
    CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
    CBasePlayer::Hints()
    CBasePlayer::IsReadyToPlay()
    CBasePlayer::IsReadyToSpawn()
    CBasePlayer::ShouldGainInstantSpawn()
    CBasePlayer::ResetPerRoundStats()
    CBasePlayer::ResetScores()
    CBasePlayer::EquipSuit(bool)
    CBasePlayer::RemoveSuit()
    CBasePlayer::GetPlayerMaxSpeed()
    CBasePlayer::CommitSuicide(bool, bool)
    CBasePlayer::CommitSuicide(Vector const&, bool, bool)
    CBasePlayer::IsBot() const
    CBasePlayer::IsBotOfType(int) const
    CBasePlayer::GetBotType() const
    CBasePlayer::CanPlayerTalk()
    CBaseMultiplayerPlayer::GetExpresser()
    CBasePlayer::Internal_HandleMapEvent(inputdata_t&)
    CBasePlayer::SpawnArmorValue() const
    CBasePlayer::NetworkStateChanged_m_ArmorValue()
    CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
    CBasePlayer::HasHaptics()
    CBasePlayer::SetHaptics(bool)
    CBasePlayer::PlayerSolidMask(bool) const
    CBasePlayer::BHaveChatSuspensionInCurrentMatch()
    CBasePlayer::OnVoiceTransmit()
    CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
    CAI_ExpresserHost<CBasePlayer>::Speak(char const*, char const*, char*, unsigned int, IRecipientFilter*)
    CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(char const*, AI_Response&)
    CBaseMultiplayerPlayer::SpeakIfAllowed(char const*, char const*, char*, unsigned int, IRecipientFilter*)
    CBaseMultiplayerPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned int, IRecipientFilter*)
    CBaseMultiplayerPlayer::CanBeAutobalanced()
    CBaseMultiplayerPlayer::CanSpeakVoiceCommand()
    CBaseMultiplayerPlayer::ShouldShowVoiceSubtitleToEnemy()
    CBaseMultiplayerPlayer::NoteSpokeVoiceCommand(char const*)
    CBaseMultiplayerPlayer::OnAchievementEarned(int)
    CBaseMultiplayerPlayer::GetMultiplayerExpresser()
    CBaseMultiplayerPlayer::CalculateTeamBalanceScore()
    CBaseMultiplayerPlayer::CreateExpresser()
