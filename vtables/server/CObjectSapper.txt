VTable for CObjectSapper:
    [0] CObjectSapper::~CObjectSapper()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CObjectSapper::GetServerClass()
    [10] CObjectSapper::YouForgotToImplementOrDeclareServerClass()
    [11] CObjectSapper::GetDataDescMap()
    [12] CBaseEntity::SetModelIndexOverride(int, int)
    [13] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [14] CBaseObject::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [16] CBaseObject::ShouldCollide(int, int) const
    [17] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [18] CBaseObject::ShouldTransmit(CCheckTransmitInfo const*)
    [19] CBaseObject::UpdateTransmitState()
    [20] CBaseObject::SetTransmit(CCheckTransmitInfo*, bool)
    [21] CBaseEntity::GetTracerType()
    [22] CObjectSapper::Spawn()
    [23] CObjectSapper::Precache()
    [24] CBaseObject::SetModel(char const*)
    [25] CBaseAnimating::OnNewModel()
    [26] CBaseEntity::PostConstructor(char const*)
    [27] CBaseEntity::PostClientActive()
    [28] CBaseEntity::ParseMapData(CEntityMapData*)
    [29] CBaseEntity::KeyValue(char const*, char const*)
    [30] CBaseEntity::KeyValue(char const*, float)
    [31] CBaseEntity::KeyValue(char const*, Vector const&)
    [32] CBaseEntity::GetKeyValue(char const*, char*, int)
    [33] CBaseObject::Activate()
    [34] CBaseEntity::SetParent(CBaseEntity*, int)
    [35] CBaseEntity::ObjectCaps()
    [36] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [37] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [38] CBaseEntity::DrawDebugGeometryOverlays()
    [39] CBaseObject::DrawDebugTextOverlays()
    [40] CBaseEntity::Save(ISave&)
    [41] CBaseCombatCharacter::Restore(IRestore&)
    [42] CBaseEntity::ShouldSavePhysics()
    [43] CBaseEntity::OnSave(IEntitySaveUtils*)
    [44] CBaseAnimatingOverlay::OnRestore()
    [45] CBaseEntity::RequiredEdictIndex()
    [46] CBaseEntity::MoveDone()
    [47] CBaseEntity::Think()
    [48] CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
    [49] CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
    [50] CBaseAnimating::GetBaseAnimating()
    [51] CBaseEntity::GetResponseSystem()
    [52] CBaseEntity::DispatchResponse(char const*)
    [53] CBaseObject::Classify()
    [54] CBaseEntity::DeathNotice(CBaseEntity*)
    [55] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [56] CBaseEntity::GetAutoAimRadius()
    [57] CBaseEntity::GetAutoAimCenter()
    [58] CBaseEntity::GetBeamTraceFilter()
    [59] CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    [60] CBaseObject::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [61] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [62] CObjectSapper::OnTakeDamage(CTakeDamageInfo const&)
    [63] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [64] CBaseCombatCharacter::TakeHealth(float, int)
    [65] CBaseEntity::IsAlive()
    [66] CBaseCombatCharacter::Event_Killed(CTakeDamageInfo const&)
    [67] CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [68] CBaseObject::BloodColor()
    [69] CBaseEntity::IsTriggered(CBaseEntity*)
    [70] CBaseEntity::IsNPC() const
    [71] CBaseCombatCharacter::MyCombatCharacterPointer()
    [72] CBaseEntity::MyNextBotPointer()
    [73] CBaseEntity::GetDelay()
    [74] CBaseEntity::IsMoving()
    [75] CBaseEntity::DamageDecal(int, int)
    [76] CBaseEntity::DecalTrace(CGameTrace*, char const*)
    [77] CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    [78] CBaseEntity::OnControls(CBaseEntity*)
    [79] CBaseEntity::HasTarget(string_t)
    [80] CBaseEntity::IsPlayer() const
    [81] CBaseEntity::IsNetClient() const
    [82] CBaseEntity::IsTemplate()
    [83] CBaseObject::IsBaseObject() const
    [84] CBaseEntity::IsBaseTrain() const
    [85] CBaseEntity::IsCombatItem() const
    [86] CBaseEntity::IsProjectileCollisionTarget() const
    [87] CBaseEntity::IsFuncLOD() const
    [88] CBaseEntity::IsBaseProjectile() const
    [89] CBaseEntity::IsBaseCombatWeapon() const
    [90] CBaseEntity::IsWearable() const
    [91] CBaseEntity::MyCombatWeaponPointer()
    [92] CBaseEntity::GetServerVehicle()
    [93] CBaseEntity::IsViewable()
    [94] CBaseObject::ChangeTeam(int)
    [95] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [96] CBaseEntity::CanStandOn(CBaseEntity*) const
    [97] CBaseEntity::CanStandOn(edict_t*) const
    [98] CBaseEntity::GetEnemy()
    [99] CBaseEntity::GetEnemy() const
    [100] CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [101] CBaseEntity::StartTouch(CBaseEntity*)
    [102] CBaseEntity::Touch(CBaseEntity*)
    [103] CBaseEntity::EndTouch(CBaseEntity*)
    [104] CBaseEntity::StartBlocked(CBaseEntity*)
    [105] CBaseEntity::Blocked(CBaseEntity*)
    [106] CBaseEntity::EndBlocked()
    [107] CBaseEntity::PhysicsSimulate()
    [108] CObjectSapper::UpdateOnRemove()
    [109] CBaseEntity::StopLoopingSounds()
    [110] CBaseEntity::SUB_AllowedToFade()
    [111] CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
    [112] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [113] CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
    [114] CBaseEntity::GetTracerAttachment()
    [115] CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    [116] CBaseEntity::DoImpactEffect(CGameTrace&, int)
    [117] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [118] CBaseEntity::Respawn()
    [119] CBaseEntity::IsLockedByMaster()
    [120] CBaseEntity::GetMaxHealth() const
    [121] CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [122] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [123] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [124] CBaseObject::NetworkStateChanged_m_iHealth()
    [125] CBaseObject::NetworkStateChanged_m_iHealth(void*)
    [126] CBaseEntity::NetworkStateChanged_m_lifeState()
    [127] CBaseEntity::NetworkStateChanged_m_lifeState(void*)
    [128] CBaseObject::NetworkStateChanged_m_takedamage()
    [129] CBaseObject::NetworkStateChanged_m_takedamage(void*)
    [130] CBaseEntity::GetDamageType() const
    [131] CBaseEntity::GetDamage()
    [132] CBaseEntity::SetDamage(float)
    [133] CBaseEntity::EyePosition()
    [134] CBaseEntity::EyeAngles()
    [135] CBaseEntity::LocalEyeAngles()
    [136] CBaseEntity::EarPosition()
    [137] CBaseEntity::BodyTarget(Vector const&, bool)
    [138] CBaseEntity::HeadTarget(Vector const&)
    [139] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [140] CBaseEntity::GetViewOffset() const
    [141] CBaseEntity::SetViewOffset(Vector const&)
    [142] CBaseEntity::GetSmoothedVelocity()
    [143] CBaseAnimating::GetVelocity(Vector*, Vector*)
    [144] CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
    [145] CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
    [146] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [147] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [148] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [149] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [150] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [151] CBaseEntity::Splash()
    [152] CBaseEntity::WorldSpaceCenter() const
    [153] CBaseEntity::GetSoundEmissionOrigin() const
    [154] CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    [155] CBaseEntity::IsDeflectable()
    [156] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [157] CBaseEntity::CreateVPhysics()
    [158] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [159] CBaseEntity::VPhysicsDestroyObject()
    [160] CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
    [161] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [162] CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [163] CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
    [164] CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
    [165] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [166] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [167] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [168] CBaseEntity::VPhysicsIsFlesh()
    [169] CBaseEntity::HasPhysicsAttacker(float)
    [170] CBaseEntity::PhysicsSolidMaskForEntity() const
    [171] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [172] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [173] CBaseAnimating::GetStepOrigin() const
    [174] CBaseAnimating::GetStepAngles() const
    [175] CBaseEntity::ShouldDrawWaterImpacts()
    [176] CBaseEntity::NetworkStateChanged_m_fFlags()
    [177] CBaseEntity::NetworkStateChanged_m_fFlags(void*)
    [178] CBaseEntity::NetworkStateChanged_m_nWaterLevel()
    [179] CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
    [180] CBaseEntity::NetworkStateChanged_m_hGroundEntity()
    [181] CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
    [182] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
    [183] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
    [184] CBaseEntity::NetworkStateChanged_m_flFriction()
    [185] CBaseEntity::NetworkStateChanged_m_flFriction(void*)
    [186] CBaseEntity::NetworkStateChanged_m_vecVelocity()
    [187] CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
    [188] CBaseEntity::NetworkStateChanged_m_vecViewOffset()
    [189] CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
    [190] CBaseObject::ShouldBlockNav() const
    [191] CBaseEntity::ShouldForceTransmitsForTeam(int)
    [192] CBaseEntity::IsTruceValidForEnt() const
    [193] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [194] CBaseEntity::BCanCallVote()
    [195] CBaseAnimating::GetIdealSpeed() const
    [196] CBaseAnimating::GetIdealAccel() const
    [197] CBaseAnimatingOverlay::StudioFrameAdvance()
    [198] CBaseAnimating::SetSequence(int)
    [199] CBaseAnimating::IsActivityFinished()
    [200] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [201] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [202] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [203] CBaseAnimating::IsRagdoll()
    [204] CBaseAnimating::CanBecomeRagdoll()
    [205] CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [206] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [207] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [208] CBaseAnimating::CalculateIKLocks(float)
    [209] CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
    [210] CBaseAnimating::HandleAnimEvent(animevent_t*)
    [211] CBaseAnimating::PopulatePoseParameters()
    [212] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [213] CBaseAnimating::InitBoneControllers()
    [214] CBaseAnimating::GetGroundSpeedVelocity()
    [215] CBaseAnimating::RefreshCollisionBounds()
    [216] CBaseAnimating::Ignite(float, bool, float, bool)
    [217] CBaseAnimating::IgniteLifetime(float)
    [218] CBaseAnimating::IgniteNumHitboxFires(int)
    [219] CBaseAnimating::IgniteHitboxFireScale(float)
    [220] CBaseAnimating::Extinguish()
    [221] CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
    [222] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [223] CBaseFlex::SetViewtarget(Vector const&)
    [224] CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
    [225] CBaseFlex::ProcessSceneEvents()
    [226] CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
    [227] CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
    [228] CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
    [229] CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
    [230] CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
    [231] CBaseFlex::GetSpecialDSP()
    [232] CBaseCombatCharacter::GetPhysicsImpactDamageTable()
    [233] CBaseCombatCharacter::FInViewCone(CBaseEntity*)
    [234] CBaseCombatCharacter::FInViewCone(Vector const&)
    [235] CBaseCombatCharacter::FInAimCone(CBaseEntity*)
    [236] CBaseCombatCharacter::FInAimCone(Vector const&)
    [237] CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
    [238] CBaseCombatCharacter::FindMissTarget()
    [239] CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
    [240] CBaseCombatCharacter::BodyAngles()
    [241] CBaseCombatCharacter::BodyDirection2D()
    [242] CBaseCombatCharacter::BodyDirection3D()
    [243] CBaseCombatCharacter::HeadDirection2D()
    [244] CBaseCombatCharacter::HeadDirection3D()
    [245] CBaseCombatCharacter::EyeDirection2D()
    [246] CBaseCombatCharacter::EyeDirection3D()
    [247] CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
    [248] CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
    [249] CBaseCombatCharacter::IsHiddenByFog(float) const
    [250] CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
    [251] CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
    [252] CBaseCombatCharacter::GetFogObscuredRatio(float) const
    [253] CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
    [254] CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
    [255] CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
    [256] CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
    [257] CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
    [258] CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
    [259] CBaseCombatCharacter::GiveAmmo(int, int, bool)
    [260] CBaseCombatCharacter::RemoveAmmo(int, int)
    [261] CBaseCombatCharacter::RemoveAmmo(int, char const*)
    [262] CBaseCombatCharacter::GetAmmoCount(int) const
    [263] CBaseCombatCharacter::NPC_TranslateActivity(Activity)
    [264] CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
    [265] CBaseCombatCharacter::Weapon_FrameUpdate()
    [266] CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
    [267] CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
    [268] CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
    [269] CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
    [270] CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
    [271] CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
    [272] CBaseCombatCharacter::Weapon_ShootPosition()
    [273] CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
    [274] CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
    [275] CBaseCombatCharacter::Weapon_GetSlot(int) const
    [276] CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
    [277] CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
    [278] CBaseCombatCharacter::CanBecomeServerRagdoll()
    [279] CBaseCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
    [280] CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
    [281] CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
    [282] CBaseCombatCharacter::GetAliveDuration() const
    [283] CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
    [284] CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
    [285] CBaseCombatCharacter::HasEverBeenInjured(int) const
    [286] CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
    [287] CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [288] CBaseCombatCharacter::GetDeathActivity()
    [289] CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
    [290] CBaseCombatCharacter::CorpseFade()
    [291] CBaseCombatCharacter::HasHumanGibs()
    [292] CBaseCombatCharacter::HasAlienGibs()
    [293] CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
    [294] CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
    [295] CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
    [296] CBaseCombatCharacter::Event_Dying(CTakeDamageInfo const&)
    [297] CBaseCombatCharacter::Event_Dying()
    [298] CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
    [299] CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
    [300] CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
    [301] CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
    [302] CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
    [303] CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
    [304] CBaseCombatCharacter::IRelationType(CBaseEntity*)
    [305] CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
    [306] CBaseCombatCharacter::IsInAVehicle() const
    [307] CBaseCombatCharacter::GetVehicle()
    [308] CBaseCombatCharacter::GetVehicleEntity()
    [309] CBaseCombatCharacter::ExitVehicle()
    [310] CBaseCombatCharacter::RemoveAllWeapons()
    [311] CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
    [312] CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
    [313] CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
    [314] CBaseCombatCharacter::DoMuzzleFlash()
    [315] CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
    [316] CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
    [317] CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
    [318] CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [319] CBaseCombatCharacter::GetLastKnownArea() const
    [320] CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
    [321] CBaseCombatCharacter::ClearLastKnownArea()
    [322] CBaseCombatCharacter::UpdateLastKnownArea()
    [323] CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
    [324] CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
    [325] CBaseCombatCharacter::OnPursuedBy(INextBot*)
    [326] CBaseCombatCharacter::GetBossType() const
    [327] CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
    [328] CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
    [329] CBaseObject::BaseObjectThink()
    [330] CBaseObject::GetOwner()
    [331] CBaseObject::FirstSpawn()
    [332] CBaseObject::SetBuilder(CTFPlayer*)
    [333] CBaseObject::SetType(int)
    [334] CBaseObject::GetTotalTime()
    [335] CBaseObject::StartPlacement(CTFPlayer*)
    [336] CBaseObject::GetNearbyObjectCheckRadius()
    [337] CBaseObject::IsPlacementPosValid()
    [338] CBaseObject::FindObjectOnBuildPoint(CBaseObject*)
    [339] CBaseObject::StartBuilding(CBaseEntity*)
    [340] CBaseObject::SetStartBuildingModel()
    [341] CObjectSapper::FinishedBuilding()
    [342] CBaseObject::IsUpgrading() const
    [343] CBaseObject::OnEndBeingCarried(CBaseEntity*)
    [344] CBaseObject::GetControlPanelInfo(int, char const*&)
    [345] CBaseObject::GetControlPanelClassName(int, char const*&)
    [346] CBaseObject::ClientCommand(CTFPlayer*, CCommand const&)
    [347] CBaseObject::Construct(float)
    [348] CBaseObject::GetConstructionMultiplier()
    [349] CBaseObject::DetonateObject()
    [350] CBaseObject::ShouldAutoRemove()
    [351] CBaseObject::Explode()
    [352] CObjectSapper::Killed(CTakeDamageInfo const&)
    [353] CBaseObject::DestroyObject()
    [354] CBaseObject::IsDying()
    [355] CBaseObject::GetType() const
    [356] CBaseObject::GetBuilder() const
    [357] CBaseObjectUpgrade::IsAnUpgrade()
    [358] CObjectSapper::IsHostileUpgrade()
    [359] CBaseObject::InputEnable(inputdata_t&)
    [360] CBaseObject::InputDisable(inputdata_t&)
    [361] CBaseObject::InputWrenchHit(CTFPlayer*, CTFWrench*, Vector)
    [362] CBaseObject::OnWrenchHit(CTFPlayer*, CTFWrench*, Vector)
    [363] CBaseObject::CheckUpgradeOnHit(CTFPlayer*)
    [364] CBaseObject::Command_Repair(CTFPlayer*, float, float, float, bool)
    [365] CBaseObject::DoWrenchHitEffect(Vector, bool, bool)
    [366] CBaseObject::ShouldBeMiniBuilding(CTFPlayer*)
    [367] CBaseObject::MakeMiniBuilding(CTFPlayer*)
    [368] CBaseObject::MakeDisposableBuilding(CTFPlayer*)
    [369] CBaseObject::ShouldBeActive()
    [370] CObjectSapper::OnGoActive()
    [371] CBaseObject::OnGoInactive()
    [372] CBaseObject::UpdateDisabledState()
    [373] CBaseObject::OnStartDisabled()
    [374] CBaseObject::OnEndDisabled()
    [375] CBaseObject::PlayStartupAnimation()
    [376] CObjectSapper::SetupAttachedVersion()
    [377] CBaseObject::ShouldPlayersAvoid()
    [378] CBaseObject::InitializeMapPlacedObject()
    [379] CBaseObject::CanBeUpgraded(CTFPlayer*)
    [380] CBaseObject::StartUpgrading()
    [381] CBaseObject::FinishUpgrading()
    [382] CBaseObject::GetUpgradeLevel() const
    [383] CObjectSapper::GetBaseHealth()
    [384] CBaseObject::GetMaxUpgradeLevel()
    [385] CBaseObject::MakeCarriedObject(CTFPlayer*)
    [386] CBaseObject::DropCarriedObject(CTFPlayer*)
    [387] CBaseObject::GetMiniBuildingStartingHealth()
    [388] CBaseObject::GetMaxHealthForCurrentLevel()
    [389] CBaseObject::GetScorer()
    [390] CBaseObject::GetAssistant()
    [391] CBaseObject::AddBuildPoint(int)
    [392] CBaseObject::AddValidObjectToBuildPoint(int, int)
    [393] CBaseObject::GetBuildPointObject(int)
    [394] CObjectSapper::DetachObjectFromObject()
    [395] CBaseObject::SetObjectMode(int)
    [396] CBaseObject::GetNumBuildPoints() const
    [397] CBaseObject::GetBuildPoint(int, Vector&, QAngle&)
    [398] CBaseObject::GetBuildPointAttachmentIndex(int) const
    [399] CBaseObject::CanBuildObjectOnBuildPoint(int, int)
    [400] CBaseObject::SetObjectOnBuildPoint(int, CBaseObject*)
    [401] CBaseObject::GetMaxSnapDistance(int)
    [402] CBaseObject::ShouldCheckForMovement()
    [403] CBaseObject::GetNumObjectsOnMe()
    [404] CBaseObject::GetFirstFriendlyObjectOnMe()
    [405] CBaseObject::GetObjectOfTypeOnMe(int)
    [406] CBaseObject::RemoveAllObjects()
    [407] CBaseObject::GetShieldLevel()
    [408] CBaseObject::CanBeRepaired() const
    [409] CBaseObject::CanBeUpgraded() const
    [410] CBaseObject::GetUpgradeMetalRequired()
    [411] CBaseObject::DetermineAnimation()
    [412] CBaseObject::DeterminePlaybackRate()
    [413] CObjectSapper::SapperThink()
