VTable for NextBotPlayer<CTFPlayer>:
    [0] NextBotPlayer<CTFPlayer>::~NextBotPlayer()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CTFPlayer::GetServerClass()
    [10] CTFPlayer::YouForgotToImplementOrDeclareServerClass()
    [11] CTFPlayer::GetDataDescMap()
    [12] CBaseEntity::SetModelIndexOverride(int, int)
    [13] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [14] CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [16] CTFPlayer::ShouldCollide(int, int) const
    [17] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [18] CTFPlayer::ShouldTransmit(CCheckTransmitInfo const*)
    [19] CBasePlayer::UpdateTransmitState()
    [20] CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
    [21] CBasePlayer::GetTracerType()
    [22] NextBotPlayer<CTFPlayer>::Spawn()
    [23] CTFPlayer::Precache()
    [24] CBasePlayer::SetModel(char const*)
    [25] CBaseAnimating::OnNewModel()
    [26] CBaseMultiplayerPlayer::PostConstructor(char const*)
    [27] CBaseEntity::PostClientActive()
    [28] CBaseEntity::ParseMapData(CEntityMapData*)
    [29] CBaseEntity::KeyValue(char const*, char const*)
    [30] CBaseEntity::KeyValue(char const*, float)
    [31] CBaseEntity::KeyValue(char const*, Vector const&)
    [32] CBaseEntity::GetKeyValue(char const*, char*, int)
    [33] CBasePlayer::Activate()
    [34] CBaseEntity::SetParent(CBaseEntity*, int)
    [35] CBasePlayer::ObjectCaps()
    [36] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [37] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [38] CBasePlayer::DrawDebugGeometryOverlays()
    [39] CTFPlayer::DrawDebugTextOverlays()
    [40] CBasePlayer::Save(ISave&)
    [41] CBasePlayer::Restore(IRestore&)
    [42] CBasePlayer::ShouldSavePhysics()
    [43] CBaseEntity::OnSave(IEntitySaveUtils*)
    [44] CBasePlayer::OnRestore()
    [45] CBasePlayer::RequiredEdictIndex()
    [46] CBaseEntity::MoveDone()
    [47] CBaseEntity::Think()
    [48] CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
    [49] CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
    [50] CBaseAnimating::GetBaseAnimating()
    [51] CTFPlayer::GetResponseSystem()
    [52] CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char const*)
    [53] CBasePlayer::Classify()
    [54] CBaseEntity::DeathNotice(CBaseEntity*)
    [55] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [56] CBaseEntity::GetAutoAimRadius()
    [57] CBaseEntity::GetAutoAimCenter()
    [58] CBaseEntity::GetBeamTraceFilter()
    [59] CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    [60] CTFPlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [61] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [62] CTFPlayer::OnTakeDamage(CTakeDamageInfo const&)
    [63] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [64] CTFPlayer::TakeHealth(float, int)
    [65] CBaseEntity::IsAlive()
    [66] NextBotPlayer<CTFPlayer>::Event_Killed(CTakeDamageInfo const&)
    [67] CTFPlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [68] CBaseCombatCharacter::BloodColor()
    [69] CBaseEntity::IsTriggered(CBaseEntity*)
    [70] CBaseEntity::IsNPC() const
    [71] CBaseCombatCharacter::MyCombatCharacterPointer()
    [72] NextBotPlayer<CTFPlayer>::MyNextBotPointer()
    [73] CBaseEntity::GetDelay()
    [74] CBaseEntity::IsMoving()
    [75] CBaseEntity::DamageDecal(int, int)
    [76] CBaseEntity::DecalTrace(CGameTrace*, char const*)
    [77] CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    [78] CBaseEntity::OnControls(CBaseEntity*)
    [79] CBaseEntity::HasTarget(string_t)
    [80] CBasePlayer::IsPlayer() const
    [81] NextBotPlayer<CTFPlayer>::IsNetClient() const
    [82] CBaseEntity::IsTemplate()
    [83] CBaseEntity::IsBaseObject() const
    [84] CBaseEntity::IsBaseTrain() const
    [85] CBaseEntity::IsCombatItem() const
    [86] CBaseEntity::IsProjectileCollisionTarget() const
    [87] CBaseEntity::IsFuncLOD() const
    [88] CBaseEntity::IsBaseProjectile() const
    [89] CBaseEntity::IsBaseCombatWeapon() const
    [90] CBaseEntity::IsWearable() const
    [91] CBaseEntity::MyCombatWeaponPointer()
    [92] CBaseEntity::GetServerVehicle()
    [93] CBaseEntity::IsViewable()
    [94] CTFPlayer::ChangeTeam(int)
    [95] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [96] CBaseEntity::CanStandOn(CBaseEntity*) const
    [97] CBaseEntity::CanStandOn(edict_t*) const
    [98] CBaseEntity::GetEnemy()
    [99] CBaseEntity::GetEnemy() const
    [100] CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [101] CBaseEntity::StartTouch(CBaseEntity*)
    [102] NextBotPlayer<CTFPlayer>::Touch(CBaseEntity*)
    [103] CBaseEntity::EndTouch(CBaseEntity*)
    [104] CBaseEntity::StartBlocked(CBaseEntity*)
    [105] CBaseEntity::Blocked(CBaseEntity*)
    [106] CBaseEntity::EndBlocked()
    [107] NextBotPlayer<CTFPlayer>::PhysicsSimulate()
    [108] CTFPlayer::UpdateOnRemove()
    [109] CBaseEntity::StopLoopingSounds()
    [110] CBaseEntity::SUB_AllowedToFade()
    [111] CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
    [112] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [113] CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
    [114] CBaseEntity::GetTracerAttachment()
    [115] CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    [116] CBasePlayer::DoImpactEffect(CGameTrace&, int)
    [117] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [118] CBaseEntity::Respawn()
    [119] CBaseEntity::IsLockedByMaster()
    [120] CTFPlayer::GetMaxHealth() const
    [121] CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [122] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [123] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [124] CBasePlayer::NetworkStateChanged_m_iHealth()
    [125] CBasePlayer::NetworkStateChanged_m_iHealth(void*)
    [126] CBasePlayer::NetworkStateChanged_m_lifeState()
    [127] CBasePlayer::NetworkStateChanged_m_lifeState(void*)
    [128] CBaseEntity::NetworkStateChanged_m_takedamage()
    [129] CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    [130] CBaseEntity::GetDamageType() const
    [131] CBaseEntity::GetDamage()
    [132] CBaseEntity::SetDamage(float)
    [133] CBasePlayer::EyePosition()
    [134] CBasePlayer::EyeAngles()
    [135] CBasePlayer::LocalEyeAngles()
    [136] CBaseEntity::EarPosition()
    [137] CBasePlayer::BodyTarget(Vector const&, bool)
    [138] CBaseEntity::HeadTarget(Vector const&)
    [139] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [140] CBaseEntity::GetViewOffset() const
    [141] CBaseEntity::SetViewOffset(Vector const&)
    [142] CBasePlayer::GetSmoothedVelocity()
    [143] CBaseAnimating::GetVelocity(Vector*, Vector*)
    [144] CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
    [145] CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
    [146] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [147] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [148] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [149] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [150] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [151] CBaseEntity::Splash()
    [152] CBaseEntity::WorldSpaceCenter() const
    [153] CBaseEntity::GetSoundEmissionOrigin() const
    [154] CTFPlayer::ModifyEmitSoundParams(EmitSound_t&)
    [155] CTFPlayer::IsDeflectable()
    [156] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [157] CBaseEntity::CreateVPhysics()
    [158] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [159] CBasePlayer::VPhysicsDestroyObject()
    [160] CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
    [161] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [162] CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [163] CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
    [164] CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
    [165] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [166] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [167] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [168] CBaseEntity::VPhysicsIsFlesh()
    [169] CBaseEntity::HasPhysicsAttacker(float)
    [170] CBasePlayer::PhysicsSolidMaskForEntity() const
    [171] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [172] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [173] CBaseAnimating::GetStepOrigin() const
    [174] CBaseAnimating::GetStepAngles() const
    [175] CBaseEntity::ShouldDrawWaterImpacts()
    [176] CBasePlayer::NetworkStateChanged_m_fFlags()
    [177] CBasePlayer::NetworkStateChanged_m_fFlags(void*)
    [178] CBasePlayer::NetworkStateChanged_m_nWaterLevel()
    [179] CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
    [180] CBasePlayer::NetworkStateChanged_m_hGroundEntity()
    [181] CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
    [182] CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
    [183] CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
    [184] CBasePlayer::NetworkStateChanged_m_flFriction()
    [185] CBasePlayer::NetworkStateChanged_m_flFriction(void*)
    [186] CBasePlayer::NetworkStateChanged_m_vecVelocity()
    [187] CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
    [188] CBasePlayer::NetworkStateChanged_m_vecViewOffset()
    [189] CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
    [190] CBaseEntity::ShouldBlockNav() const
    [191] CTFPlayer::ShouldForceTransmitsForTeam(int)
    [192] CTFPlayer::IsTruceValidForEnt() const
    [193] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [194] CTFPlayer::BCanCallVote()
    [195] CBaseAnimating::GetIdealSpeed() const
    [196] CBaseAnimating::GetIdealAccel() const
    [197] CBaseAnimatingOverlay::StudioFrameAdvance()
    [198] CBaseAnimating::SetSequence(int)
    [199] CBaseAnimating::IsActivityFinished()
    [200] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [201] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [202] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [203] CBaseAnimating::IsRagdoll()
    [204] CBaseAnimating::CanBecomeRagdoll()
    [205] CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [206] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [207] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [208] CBaseAnimating::CalculateIKLocks(float)
    [209] CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
    [210] NextBotPlayer<CTFPlayer>::HandleAnimEvent(animevent_t*)
    [211] CBaseAnimating::PopulatePoseParameters()
    [212] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [213] CBaseAnimating::InitBoneControllers()
    [214] CBaseAnimating::GetGroundSpeedVelocity()
    [215] CTFPlayer::RefreshCollisionBounds()
    [216] CBaseAnimating::Ignite(float, bool, float, bool)
    [217] CBaseAnimating::IgniteLifetime(float)
    [218] CBaseAnimating::IgniteNumHitboxFires(int)
    [219] CBaseAnimating::IgniteHitboxFireScale(float)
    [220] CBaseAnimating::Extinguish()
    [221] CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
    [222] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [223] CBaseFlex::SetViewtarget(Vector const&)
    [224] CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
    [225] CBaseFlex::ProcessSceneEvents()
    [226] CTFPlayer::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
    [227] CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
    [228] CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
    [229] CTFPlayer::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
    [230] CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
    [231] CTFPlayer::GetSpecialDSP()
    [232] CBasePlayer::GetPhysicsImpactDamageTable()
    [233] CBaseCombatCharacter::FInViewCone(CBaseEntity*)
    [234] CBaseCombatCharacter::FInViewCone(Vector const&)
    [235] CBaseCombatCharacter::FInAimCone(CBaseEntity*)
    [236] CBaseCombatCharacter::FInAimCone(Vector const&)
    [237] CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
    [238] CBaseCombatCharacter::FindMissTarget()
    [239] CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
    [240] CBasePlayer::BodyAngles()
    [241] CBaseCombatCharacter::BodyDirection2D()
    [242] CBaseCombatCharacter::BodyDirection3D()
    [243] CBaseCombatCharacter::HeadDirection2D()
    [244] CBaseCombatCharacter::HeadDirection3D()
    [245] CBaseCombatCharacter::EyeDirection2D()
    [246] CBaseCombatCharacter::EyeDirection3D()
    [247] CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
    [248] CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
    [249] CBaseCombatCharacter::IsHiddenByFog(float) const
    [250] CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
    [251] CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
    [252] CBaseCombatCharacter::GetFogObscuredRatio(float) const
    [253] CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
    [254] CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
    [255] CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
    [256] CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
    [257] CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
    [258] CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
    [259] CTFPlayer::GiveAmmo(int, int, bool)
    [260] CTFPlayer::RemoveAmmo(int, int)
    [261] CTFPlayer::RemoveAmmo(int, char const*)
    [262] CTFPlayer::GetAmmoCount(int) const
    [263] CBaseCombatCharacter::NPC_TranslateActivity(Activity)
    [264] CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
    [265] CTFPlayer::Weapon_FrameUpdate()
    [266] CTFPlayer::Weapon_HandleAnimEvent(animevent_t*)
    [267] CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
    [268] NextBotPlayer<CTFPlayer>::Weapon_Equip(CBaseCombatWeapon*)
    [269] CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
    [270] NextBotPlayer<CTFPlayer>::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
    [271] CTFPlayer::Weapon_Switch(CBaseCombatWeapon*, int)
    [272] CBasePlayer::Weapon_ShootPosition()
    [273] CTFPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon*)
    [274] CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
    [275] CBaseCombatCharacter::Weapon_GetSlot(int) const
    [276] CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
    [277] CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
    [278] CBaseCombatCharacter::CanBecomeServerRagdoll()
    [279] NextBotPlayer<CTFPlayer>::OnTakeDamage_Alive(CTakeDamageInfo const&)
    [280] NextBotPlayer<CTFPlayer>::OnTakeDamage_Dying(CTakeDamageInfo const&)
    [281] CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
    [282] CBaseCombatCharacter::GetAliveDuration() const
    [283] CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
    [284] CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
    [285] CBaseCombatCharacter::HasEverBeenInjured(int) const
    [286] CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
    [287] CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [288] CBaseCombatCharacter::GetDeathActivity()
    [289] CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
    [290] CBaseCombatCharacter::CorpseFade()
    [291] CBaseCombatCharacter::HasHumanGibs()
    [292] CBaseCombatCharacter::HasAlienGibs()
    [293] CTFPlayer::ShouldGib(CTakeDamageInfo const&)
    [294] CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
    [295] CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
    [296] CBasePlayer::Event_Dying(CTakeDamageInfo const&)
    [297] CBaseCombatCharacter::Event_Dying()
    [298] CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
    [299] CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
    [300] CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
    [301] CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
    [302] CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
    [303] CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
    [304] CBaseCombatCharacter::IRelationType(CBaseEntity*)
    [305] CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
    [306] CBasePlayer::IsInAVehicle() const
    [307] CBasePlayer::GetVehicle()
    [308] CBasePlayer::GetVehicleEntity()
    [309] CBaseCombatCharacter::ExitVehicle()
    [310] CTFPlayer::RemoveAllWeapons()
    [311] CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
    [312] CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
    [313] CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
    [314] CBasePlayer::DoMuzzleFlash()
    [315] CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
    [316] CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
    [317] CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
    [318] CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [319] CBaseCombatCharacter::GetLastKnownArea() const
    [320] CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
    [321] CBaseCombatCharacter::ClearLastKnownArea()
    [322] CBaseCombatCharacter::UpdateLastKnownArea()
    [323] NextBotPlayer<CTFPlayer>::OnNavAreaChanged(CNavArea*, CNavArea*)
    [324] CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
    [325] CBaseCombatCharacter::OnPursuedBy(INextBot*)
    [326] CBaseCombatCharacter::GetBossType() const
    [327] CBasePlayer::NetworkStateChanged_m_iAmmo()
    [328] CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
    [329] CTFPlayer::CreateViewModel(int)
    [330] CTFPlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
    [331] CTFPlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
    [332] CBasePlayer::SharedSpawn()
    [333] CTFPlayer::ForceRespawn()
    [334] CTFPlayer::InitialSpawn()
    [335] CBasePlayer::InitHUD()
    [336] CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
    [337] CTFPlayer::PlayerDeathThink()
    [338] CBasePlayer::Jump()
    [339] CBasePlayer::Duck()
    [340] CTFPlayer::PreThink()
    [341] CTFPlayer::PostThink()
    [342] CTFPlayer::DamageEffect(float, int)
    [343] CTFPlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
    [344] CBasePlayer::ShouldFadeOnDeath()
    [345] NextBotPlayer<CTFPlayer>::IsFakeClient() const
    [346] CBasePlayer::GetPlayerMins() const
    [347] CBasePlayer::GetPlayerMaxs() const
    [348] CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
    [349] CBasePlayer::PackDeadPlayerItems()
    [350] CTFPlayer::RemoveAllItems(bool)
    [351] CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
    [352] CTFPlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [353] CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
    [354] CTFPlayer::OnMyWeaponFired(CBaseCombatWeapon*)
    [355] CBasePlayer::GetTimeSinceWeaponFired() const
    [356] CBasePlayer::IsFiringWeapon() const
    [357] CBasePlayer::UpdateClientData()
    [358] CBasePlayer::ExitLadder()
    [359] CBasePlayer::GetLadderSurface(Vector const&)
    [360] CBasePlayer::SetFlashlightEnabled(bool)
    [361] CTFPlayer::FlashlightIsOn()
    [362] CTFPlayer::FlashlightTurnOn()
    [363] CTFPlayer::FlashlightTurnOff()
    [364] CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
    [365] CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
    [366] CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
    [367] CTFPlayer::GetOverrideStepSound(char const*)
    [368] CTFPlayer::GetStepSoundVelocities(float*, float*)
    [369] CTFPlayer::SetStepSoundTime(stepsoundtimes_t, bool)
    [370] CTFPlayer::DeathSound(CTakeDamageInfo const&)
    [371] CTFPlayer::GetSceneSoundToken()
    [372] CTFPlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
    [373] CTFPlayer::SetAnimation(PLAYER_ANIM)
    [374] CBasePlayer::ImpulseCommands()
    [375] CTFPlayer::CheatImpulseCommands(int)
    [376] CTFPlayer::ClientCommand(CCommand const&)
    [377] CTFPlayer::GetTeamVoteController()
    [378] CBasePlayer::StartObserverMode(int)
    [379] CBasePlayer::StopObserverMode()
    [380] CTFPlayer::ModeWantsSpectatorGUI(int)
    [381] CTFPlayer::SetObserverMode(int)
    [382] CBasePlayer::GetObserverMode()
    [383] CTFPlayer::SetObserverTarget(CBaseEntity*)
    [384] CBasePlayer::ObserverUse(bool)
    [385] CBasePlayer::GetObserverTarget()
    [386] CTFPlayer::FindNextObserverTarget(bool)
    [387] CTFPlayer::GetNextObserverSearchStartPoint(bool)
    [388] CTFPlayer::IsValidObserverTarget(CBaseEntity*)
    [389] CTFPlayer::CheckObserverSettings()
    [390] CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
    [391] CBasePlayer::ForceObserverMode(int)
    [392] CBasePlayer::ResetObserverMode()
    [393] CTFPlayer::ValidateCurrentObserverTarget()
    [394] CTFPlayer::AttemptToExitFreezeCam()
    [395] CBasePlayer::StartReplayMode(float, float, int)
    [396] CBasePlayer::StopReplayMode()
    [397] CBasePlayer::GetDelayTicks()
    [398] CBasePlayer::GetReplayEntity()
    [399] CBasePlayer::CreateCorpse()
    [400] NextBotPlayer<CTFPlayer>::EntSelectSpawnPoint()
    [401] CBasePlayer::GetInVehicle(IServerVehicle*, int)
    [402] CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
    [403] CBasePlayer::OnVehicleStart()
    [404] CBasePlayer::OnVehicleEnd(Vector&)
    [405] CTFPlayer::BumpWeapon(CBaseCombatWeapon*)
    [406] CBasePlayer::SelectLastItem()
    [407] CTFPlayer::SelectItem(char const*, int)
    [408] CTFPlayer::ItemPostFrame()
    [409] CBasePlayer::GiveNamedItem(char const*, int)
    [410] CBasePlayer::CheckTrainUpdate()
    [411] CBasePlayer::SetPlayerUnderwater(bool)
    [412] CTFPlayer::CanBreatheUnderwater() const
    [413] CTFPlayer::PlayerUse()
    [414] CBasePlayer::PlayUseDenySound()
    [415] CBasePlayer::FindUseEntity()
    [416] CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
    [417] CBasePlayer::PickupObject(CBaseEntity*, bool)
    [418] CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
    [419] CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
    [420] CBasePlayer::UpdateGeigerCounter()
    [421] CBasePlayer::GetAutoaimVector(float)
    [422] CBasePlayer::GetAutoaimVector(float, float)
    [423] CBasePlayer::GetAutoaimVector(autoaim_params_t&)
    [424] CBasePlayer::ShouldAutoaim()
    [425] CBasePlayer::ForceClientDllUpdate()
    [426] CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
    [427] CTFPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
    [428] CTFPlayer::ChangeTeam(int, bool, bool, bool)
    [429] CTFPlayer::CanHearAndReadChatFrom(CBasePlayer*)
    [430] CBaseMultiplayerPlayer::CanSpeak()
    [431] CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
    [432] CBasePlayer::CheckChatText(char*, int)
    [433] CTFPlayer::CreateRagdollEntity()
    [434] CTFPlayer::ShouldAnnounceAchievement()
    [435] CBasePlayer::EquipWearable(CEconWearable*)
    [436] CBasePlayer::RemoveWearable(CEconWearable*)
    [437] CBasePlayer::IsFollowingPhysics()
    [438] CBasePlayer::InitVCollision(Vector const&, Vector const&)
    [439] CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
    [440] CBasePlayer::Hints()
    [441] CTFPlayer::IsReadyToPlay()
    [442] CTFPlayer::IsReadyToSpawn()
    [443] CTFPlayer::ShouldGainInstantSpawn()
    [444] CTFPlayer::ResetPerRoundStats()
    [445] CTFPlayer::ResetScores()
    [446] CBasePlayer::EquipSuit(bool)
    [447] CBasePlayer::RemoveSuit()
    [448] CBasePlayer::GetPlayerMaxSpeed()
    [449] CTFPlayer::CommitSuicide(bool, bool)
    [450] CBasePlayer::CommitSuicide(Vector const&, bool, bool)
    [451] NextBotPlayer<CTFPlayer>::IsBot() const
    [452] CBasePlayer::IsBotOfType(int) const
    [453] CBasePlayer::GetBotType() const
    [454] CTFPlayer::CanPlayerTalk()
    [455] CBaseMultiplayerPlayer::GetExpresser()
    [456] CTFPlayer::Internal_HandleMapEvent(inputdata_t&)
    [457] CBasePlayer::SpawnArmorValue() const
    [458] CBasePlayer::NetworkStateChanged_m_ArmorValue()
    [459] CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
    [460] CBasePlayer::HasHaptics()
    [461] CBasePlayer::SetHaptics(bool)
    [462] CBasePlayer::PlayerSolidMask(bool) const
    [463] CTFPlayer::BHaveChatSuspensionInCurrentMatch()
    [464] CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
    [465] CAI_ExpresserHost<CBasePlayer>::Speak(char const*, char const*, char*, unsigned int, IRecipientFilter*)
    [466] CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(char const*, AI_Response&)
    [467] CBaseMultiplayerPlayer::SpeakIfAllowed(char const*, char const*, char*, unsigned int, IRecipientFilter*)
    [468] CTFPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned int, IRecipientFilter*)
    [469] CTFPlayer::CanBeAutobalanced()
    [470] CTFPlayer::CanSpeakVoiceCommand()
    [471] CTFPlayer::ShouldShowVoiceSubtitleToEnemy()
    [472] CTFPlayer::NoteSpokeVoiceCommand(char const*)
    [473] CTFPlayer::OnAchievementEarned(int)
    [474] CBaseMultiplayerPlayer::GetMultiplayerExpresser()
    [475] CTFPlayer::CalculateTeamBalanceScore()
    [476] CBaseMultiplayerPlayer::CreateExpresser()
    [477] CTFPlayer::DetermineAssistForKill(CTakeDamageInfo const&)
    [478] CTFPlayer::SetNumberofDominations(int)
    [479] CTFPlayer::GetNumberofDominations()
    [480] CTFPlayer::IsAllowedToPickUpFlag() const
    [481] CTFPlayer::GetAttributeManager()
    [482] CTFPlayer::GetAttributeContainer()
    [483] CTFPlayer::GetAttributeOwner()
    [484] CTFPlayer::GetAttributeList()
    [485] CTFPlayer::ReapplyProvision()
    [486] CTFPlayer::InventoryUpdated(CPlayerInventory*)
    [487] CTFPlayer::SOCacheUnsubscribed(CSteamID const&)
    [488] CTFPlayer::GiveNamedItem(char const*, int, CEconItemView const*, bool)
    [489] CTFPlayer::GetAllowedTauntPartnerTeam() const
    [490] CTFPlayer::InitClass()
    [491] NextBotPlayer<CTFPlayer>::SetSpawnPoint(CBaseEntity*)
    [492] NextBotPlayer<CTFPlayer>::GetEntity() const
    [493] NextBotPlayer<CTFPlayer>::IsRemovedOnReset() const
    [494] NextBotPlayer<CTFPlayer>::IsDormantWhenDead() const
    [495] NextBotPlayer<CTFPlayer>::PressFireButton(float)
    [496] NextBotPlayer<CTFPlayer>::ReleaseFireButton()
    [497] NextBotPlayer<CTFPlayer>::PressAltFireButton(float)
    [498] NextBotPlayer<CTFPlayer>::ReleaseAltFireButton()
    [499] NextBotPlayer<CTFPlayer>::PressMeleeButton(float)
    [500] NextBotPlayer<CTFPlayer>::ReleaseMeleeButton()
    [501] NextBotPlayer<CTFPlayer>::PressSpecialFireButton(float)
    [502] NextBotPlayer<CTFPlayer>::ReleaseSpecialFireButton()
    [503] NextBotPlayer<CTFPlayer>::PressUseButton(float)
    [504] NextBotPlayer<CTFPlayer>::ReleaseUseButton()
    [505] NextBotPlayer<CTFPlayer>::PressReloadButton(float)
    [506] NextBotPlayer<CTFPlayer>::ReleaseReloadButton()
    [507] NextBotPlayer<CTFPlayer>::PressForwardButton(float)
    [508] NextBotPlayer<CTFPlayer>::ReleaseForwardButton()
    [509] NextBotPlayer<CTFPlayer>::PressBackwardButton(float)
    [510] NextBotPlayer<CTFPlayer>::ReleaseBackwardButton()
    [511] NextBotPlayer<CTFPlayer>::PressLeftButton(float)
    [512] NextBotPlayer<CTFPlayer>::ReleaseLeftButton()
    [513] NextBotPlayer<CTFPlayer>::PressRightButton(float)
    [514] NextBotPlayer<CTFPlayer>::ReleaseRightButton()
    [515] NextBotPlayer<CTFPlayer>::PressJumpButton(float)
    [516] NextBotPlayer<CTFPlayer>::ReleaseJumpButton()
    [517] NextBotPlayer<CTFPlayer>::PressCrouchButton(float)
    [518] NextBotPlayer<CTFPlayer>::ReleaseCrouchButton()
    [519] NextBotPlayer<CTFPlayer>::PressWalkButton(float)
    [520] NextBotPlayer<CTFPlayer>::ReleaseWalkButton()
    [521] NextBotPlayer<CTFPlayer>::SetButtonScale(float, float)
    [522] NextBotPlayer<CTFPlayer>::OnMainActivityComplete(Activity, Activity)
    [523] NextBotPlayer<CTFPlayer>::OnMainActivityInterrupted(Activity, Activity)
    [524] NextBotPlayer<CTFPlayer>::AvoidPlayers(CUserCmd*)
    [525] NextBotPlayer<CTFPlayer>::Update()
