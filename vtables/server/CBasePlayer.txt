VTable for CBasePlayer:
    [0] CBasePlayer::~CBasePlayer()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CBasePlayer::GetServerClass()
    [10] CBasePlayer::YouForgotToImplementOrDeclareServerClass()
    [11] CBasePlayer::GetDataDescMap()
    [12] CBasePlayer::GetScriptDesc()
    [13] CBaseEntity::SetModelIndexOverride(int, int)
    [14] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [16] CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [17] CBaseEntity::ShouldCollide(int, int) const
    [18] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [19] CBaseEntity::SetScriptOwnerEntity(HSCRIPT__*)
    [20] CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
    [21] CBasePlayer::UpdateTransmitState()
    [22] CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
    [23] CBasePlayer::GetTracerType()
    [24] CBasePlayer::Spawn()
    [25] CBasePlayer::Precache()
    [26] CBasePlayer::SetModel(char const*)
    [27] CBaseAnimating::OnNewModel()
    [28] CBaseEntity::PostConstructor(char const*)
    [29] CBaseEntity::PostClientActive()
    [30] CBaseEntity::ParseMapData(CEntityMapData*)
    [31] CBaseEntity::KeyValue(char const*, char const*)
    [32] CBaseEntity::KeyValue(char const*, float)
    [33] CBaseEntity::KeyValue(char const*, Vector const&)
    [34] CBaseEntity::GetKeyValue(char const*, char*, int)
    [35] CBasePlayer::Activate()
    [36] CBaseEntity::SetParent(CBaseEntity*, int)
    [37] CBasePlayer::ObjectCaps()
    [38] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [39] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [40] CBasePlayer::DrawDebugGeometryOverlays()
    [41] CBaseAnimating::DrawDebugTextOverlays()
    [42] CBasePlayer::Save(ISave&)
    [43] CBasePlayer::Restore(IRestore&)
    [44] CBasePlayer::ShouldSavePhysics()
    [45] CBaseEntity::OnSave(IEntitySaveUtils*)
    [46] CBasePlayer::OnRestore()
    [47] CBasePlayer::RequiredEdictIndex()
    [48] CBaseEntity::MoveDone()
    [49] CBaseEntity::Think()
    [50] CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
    [51] CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
    [52] CBaseAnimating::GetBaseAnimating()
    [53] CBaseEntity::GetResponseSystem()
    [54] CBaseEntity::DispatchResponse(char const*)
    [55] CBasePlayer::Classify()
    [56] CBaseEntity::DeathNotice(CBaseEntity*)
    [57] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [58] CBaseEntity::GetAutoAimRadius()
    [59] CBaseEntity::GetAutoAimCenter()
    [60] CBaseEntity::GetBeamTraceFilter()
    [61] CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    [62] CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [63] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [64] CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
    [65] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [66] CBasePlayer::TakeHealth(float, int)
    [67] CBaseEntity::IsAlive()
    [68] CBasePlayer::Event_Killed(CTakeDamageInfo const&)
    [69] CBasePlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [70] CBaseCombatCharacter::BloodColor()
    [71] CBaseEntity::IsTriggered(CBaseEntity*)
    [72] CBaseEntity::IsNPC() const
    [73] CBaseCombatCharacter::MyCombatCharacterPointer()
    [74] CBaseEntity::MyNextBotPointer()
    [75] CBaseEntity::GetDelay()
    [76] CBaseEntity::IsMoving()
    [77] CBaseEntity::DamageDecal(int, int)
    [78] CBaseEntity::DecalTrace(CGameTrace*, char const*)
    [79] CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    [80] CBaseEntity::OnControls(CBaseEntity*)
    [81] CBaseEntity::HasTarget(string_t)
    [82] CBasePlayer::IsPlayer() const
    [83] CBasePlayer::IsNetClient() const
    [84] CBaseEntity::IsTemplate()
    [85] CBaseEntity::IsBaseObject() const
    [86] CBaseEntity::IsBaseTrain() const
    [87] CBaseEntity::IsCombatItem() const
    [88] CBaseEntity::IsProjectileCollisionTarget() const
    [89] CBaseEntity::IsFuncLOD() const
    [90] CBaseEntity::IsBaseProjectile() const
    [91] CBaseEntity::IsBaseCombatWeapon() const
    [92] CBaseEntity::IsWearable() const
    [93] CBaseEntity::MyCombatWeaponPointer()
    [94] CBaseEntity::GetServerVehicle()
    [95] CBaseEntity::IsViewable()
    [96] CBasePlayer::ChangeTeam(int)
    [97] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [98] CBaseEntity::CanStandOn(CBaseEntity*) const
    [99] CBaseEntity::CanStandOn(edict_t*) const
    [100] CBaseEntity::GetEnemy()
    [101] CBaseEntity::GetEnemy() const
    [102] CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [103] CBaseEntity::StartTouch(CBaseEntity*)
    [104] CBasePlayer::Touch(CBaseEntity*)
    [105] CBaseEntity::EndTouch(CBaseEntity*)
    [106] CBaseEntity::StartBlocked(CBaseEntity*)
    [107] CBaseEntity::Blocked(CBaseEntity*)
    [108] CBaseEntity::EndBlocked()
    [109] CBasePlayer::PhysicsSimulate()
    [110] CBasePlayer::UpdateOnRemove()
    [111] CBaseEntity::StopLoopingSounds()
    [112] CBaseEntity::SUB_AllowedToFade()
    [113] CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
    [114] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [115] CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
    [116] CBaseEntity::GetTracerAttachment()
    [117] CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    [118] CBasePlayer::DoImpactEffect(CGameTrace&, int)
    [119] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [120] CBaseEntity::Respawn()
    [121] CBaseEntity::IsLockedByMaster()
    [122] CBaseEntity::GetMaxHealth() const
    [123] CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [124] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [125] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [126] CBasePlayer::NetworkStateChanged_m_iHealth()
    [127] CBasePlayer::NetworkStateChanged_m_iHealth(void*)
    [128] CBasePlayer::NetworkStateChanged_m_lifeState()
    [129] CBasePlayer::NetworkStateChanged_m_lifeState(void*)
    [130] CBaseEntity::NetworkStateChanged_m_takedamage()
    [131] CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    [132] CBaseEntity::RunVScripts()
    [133] CBaseEntity::GetDamageType() const
    [134] CBaseEntity::GetDamage()
    [135] CBaseEntity::SetDamage(float)
    [136] CBasePlayer::EyePosition()
    [137] CBasePlayer::EyeAngles()
    [138] CBasePlayer::LocalEyeAngles()
    [139] CBaseEntity::EarPosition()
    [140] CBasePlayer::BodyTarget(Vector const&, bool)
    [141] CBaseEntity::HeadTarget(Vector const&)
    [142] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [143] CBaseEntity::GetViewOffset() const
    [144] CBaseEntity::SetViewOffset(Vector const&)
    [145] CBasePlayer::GetSmoothedVelocity()
    [146] CBaseAnimating::GetVelocity(Vector*, Vector*)
    [147] CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
    [148] CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
    [149] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [150] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [151] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [152] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [153] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [154] CBaseEntity::Splash()
    [155] CBaseEntity::WorldSpaceCenter() const
    [156] CBaseEntity::GetSoundEmissionOrigin() const
    [157] CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    [158] CBaseEntity::IsDeflectable()
    [159] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [160] CBaseEntity::CreateVPhysics()
    [161] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [162] CBasePlayer::VPhysicsDestroyObject()
    [163] CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
    [164] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [165] CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [166] CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
    [167] CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
    [168] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [169] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [170] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [171] CBaseEntity::VPhysicsIsFlesh()
    [172] CBaseEntity::HasPhysicsAttacker(float)
    [173] CBasePlayer::PhysicsSolidMaskForEntity() const
    [174] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [175] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [176] CBaseAnimating::GetStepOrigin() const
    [177] CBaseAnimating::GetStepAngles() const
    [178] CBaseEntity::ShouldDrawWaterImpacts()
    [179] CBasePlayer::NetworkStateChanged_m_fFlags()
    [180] CBasePlayer::NetworkStateChanged_m_fFlags(void*)
    [181] CBasePlayer::NetworkStateChanged_m_nWaterLevel()
    [182] CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
    [183] CBasePlayer::NetworkStateChanged_m_hGroundEntity()
    [184] CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
    [185] CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
    [186] CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
    [187] CBasePlayer::NetworkStateChanged_m_flFriction()
    [188] CBasePlayer::NetworkStateChanged_m_flFriction(void*)
    [189] CBasePlayer::NetworkStateChanged_m_vecVelocity()
    [190] CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
    [191] CBasePlayer::NetworkStateChanged_m_vecViewOffset()
    [192] CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
    [193] CBaseEntity::ShouldBlockNav() const
    [194] CBaseEntity::ShouldForceTransmitsForTeam(int)
    [195] CBaseEntity::IsTruceValidForEnt() const
    [196] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [197] CBaseEntity::BCanCallVote()
    [198] CBaseAnimating::GetIdealSpeed() const
    [199] CBaseAnimating::GetIdealAccel() const
    [200] CBaseAnimatingOverlay::StudioFrameAdvance()
    [201] CBaseAnimating::SetSequence(int)
    [202] CBaseAnimating::IsActivityFinished()
    [203] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [204] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [205] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [206] CBaseAnimating::IsRagdoll()
    [207] CBaseAnimating::CanBecomeRagdoll()
    [208] CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [209] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [210] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [211] CBaseAnimating::CalculateIKLocks(float)
    [212] CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
    [213] CBasePlayer::HandleAnimEvent(animevent_t*)
    [214] CBaseAnimating::PopulatePoseParameters()
    [215] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [216] CBaseAnimating::InitBoneControllers()
    [217] CBaseAnimating::GetGroundSpeedVelocity()
    [218] CBasePlayer::RefreshCollisionBounds()
    [219] CBaseAnimating::Ignite(float, bool, float, bool)
    [220] CBaseAnimating::IgniteLifetime(float)
    [221] CBaseAnimating::IgniteNumHitboxFires(int)
    [222] CBaseAnimating::IgniteHitboxFireScale(float)
    [223] CBaseAnimating::Extinguish()
    [224] CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
    [225] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [226] CBaseFlex::SetViewtarget(Vector const&)
    [227] CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
    [228] CBaseFlex::ProcessSceneEvents()
    [229] CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
    [230] CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
    [231] CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
    [232] CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
    [233] CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
    [234] CBaseFlex::GetSpecialDSP()
    [235] CBasePlayer::GetPhysicsImpactDamageTable()
    [236] CBaseCombatCharacter::FInViewCone(CBaseEntity*)
    [237] CBaseCombatCharacter::FInViewCone(Vector const&)
    [238] CBaseCombatCharacter::FInAimCone(CBaseEntity*)
    [239] CBaseCombatCharacter::FInAimCone(Vector const&)
    [240] CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
    [241] CBaseCombatCharacter::FindMissTarget()
    [242] CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
    [243] CBasePlayer::BodyAngles()
    [244] CBaseCombatCharacter::BodyDirection2D()
    [245] CBaseCombatCharacter::BodyDirection3D()
    [246] CBaseCombatCharacter::HeadDirection2D()
    [247] CBaseCombatCharacter::HeadDirection3D()
    [248] CBaseCombatCharacter::EyeDirection2D()
    [249] CBaseCombatCharacter::EyeDirection3D()
    [250] CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
    [251] CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
    [252] CBaseCombatCharacter::IsHiddenByFog(float) const
    [253] CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
    [254] CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
    [255] CBaseCombatCharacter::GetFogObscuredRatio(float) const
    [256] CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
    [257] CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
    [258] CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
    [259] CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
    [260] CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
    [261] CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
    [262] CBaseCombatCharacter::GiveAmmo(int, int, bool)
    [263] CBaseCombatCharacter::RemoveAmmo(int, int)
    [264] CBaseCombatCharacter::RemoveAmmo(int, char const*)
    [265] CBaseCombatCharacter::GetAmmoCount(int) const
    [266] CBaseCombatCharacter::NPC_TranslateActivity(Activity)
    [267] CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
    [268] CBaseCombatCharacter::Weapon_FrameUpdate()
    [269] CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
    [270] CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
    [271] CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
    [272] CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
    [273] CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
    [274] CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
    [275] CBasePlayer::Weapon_ShootPosition()
    [276] CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
    [277] CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
    [278] CBaseCombatCharacter::Weapon_GetSlot(int) const
    [279] CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
    [280] CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
    [281] CBaseCombatCharacter::CanBecomeServerRagdoll()
    [282] CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
    [283] CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
    [284] CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
    [285] CBaseCombatCharacter::GetAliveDuration() const
    [286] CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
    [287] CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
    [288] CBaseCombatCharacter::HasEverBeenInjured(int) const
    [289] CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
    [290] CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [291] CBaseCombatCharacter::GetDeathActivity()
    [292] CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
    [293] CBaseCombatCharacter::CorpseFade()
    [294] CBaseCombatCharacter::HasHumanGibs()
    [295] CBaseCombatCharacter::HasAlienGibs()
    [296] CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
    [297] CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
    [298] CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
    [299] CBasePlayer::Event_Dying(CTakeDamageInfo const&)
    [300] CBaseCombatCharacter::Event_Dying()
    [301] CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
    [302] CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
    [303] CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
    [304] CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
    [305] CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
    [306] CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
    [307] CBaseCombatCharacter::IRelationType(CBaseEntity*)
    [308] CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
    [309] CBasePlayer::IsInAVehicle() const
    [310] CBasePlayer::GetVehicle()
    [311] CBasePlayer::GetVehicleEntity()
    [312] CBaseCombatCharacter::ExitVehicle()
    [313] CBaseCombatCharacter::RemoveAllWeapons()
    [314] CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
    [315] CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
    [316] CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
    [317] CBasePlayer::DoMuzzleFlash()
    [318] CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
    [319] CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
    [320] CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
    [321] CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [322] CBaseCombatCharacter::GetLastKnownArea() const
    [323] CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
    [324] CBaseCombatCharacter::ClearLastKnownArea()
    [325] CBaseCombatCharacter::UpdateLastKnownArea()
    [326] CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
    [327] CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
    [328] CBaseCombatCharacter::OnPursuedBy(INextBot*)
    [329] CBaseCombatCharacter::GetBossType() const
    [330] CBasePlayer::NetworkStateChanged_m_iAmmo()
    [331] CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
    [332] CBasePlayer::CreateViewModel(int)
    [333] CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
    [334] CBasePlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
    [335] CBasePlayer::SharedSpawn()
    [336] CBasePlayer::ForceRespawn()
    [337] CBasePlayer::InitialSpawn()
    [338] CBasePlayer::InitHUD()
    [339] CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
    [340] CBasePlayer::PlayerDeathThink()
    [341] CBasePlayer::Jump()
    [342] CBasePlayer::Duck()
    [343] CBasePlayer::PreThink()
    [344] CBasePlayer::PostThink()
    [345] CBasePlayer::DamageEffect(float, int)
    [346] CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
    [347] CBasePlayer::ShouldFadeOnDeath()
    [348] CBasePlayer::IsFakeClient() const
    [349] CBasePlayer::GetPlayerMins() const
    [350] CBasePlayer::GetPlayerMaxs() const
    [351] CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
    [352] CBasePlayer::PackDeadPlayerItems()
    [353] CBasePlayer::RemoveAllItems(bool)
    [354] CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
    [355] CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [356] CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
    [357] CBasePlayer::OnMyWeaponFired(CBaseCombatWeapon*)
    [358] CBasePlayer::GetTimeSinceWeaponFired() const
    [359] CBasePlayer::IsFiringWeapon() const
    [360] CBasePlayer::UpdateClientData()
    [361] CBasePlayer::ExitLadder()
    [362] CBasePlayer::GetLadderSurface(Vector const&)
    [363] CBasePlayer::SetFlashlightEnabled(bool)
    [364] CBasePlayer::FlashlightIsOn()
    [365] CBasePlayer::FlashlightTurnOn()
    [366] CBasePlayer::FlashlightTurnOff()
    [367] CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
    [368] CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
    [369] CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
    [370] CBasePlayer::GetOverrideStepSound(char const*)
    [371] CBasePlayer::GetStepSoundVelocities(float*, float*)
    [372] CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
    [373] CBasePlayer::DeathSound(CTakeDamageInfo const&)
    [374] CBasePlayer::GetSceneSoundToken()
    [375] CBasePlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
    [376] CBasePlayer::SetAnimation(PLAYER_ANIM)
    [377] CBasePlayer::ImpulseCommands()
    [378] CBasePlayer::CheatImpulseCommands(int)
    [379] CBasePlayer::ClientCommand(CCommand const&)
    [380] CBasePlayer::GetTeamVoteController()
    [381] CBasePlayer::StartObserverMode(int)
    [382] CBasePlayer::StopObserverMode()
    [383] CBasePlayer::ModeWantsSpectatorGUI(int)
    [384] CBasePlayer::SetObserverMode(int)
    [385] CBasePlayer::GetObserverMode()
    [386] CBasePlayer::SetObserverTarget(CBaseEntity*)
    [387] CBasePlayer::ObserverUse(bool)
    [388] CBasePlayer::GetObserverTarget()
    [389] CBasePlayer::FindNextObserverTarget(bool)
    [390] CBasePlayer::GetNextObserverSearchStartPoint(bool)
    [391] CBasePlayer::IsValidObserverTarget(CBaseEntity*)
    [392] CBasePlayer::CheckObserverSettings()
    [393] CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
    [394] CBasePlayer::ForceObserverMode(int)
    [395] CBasePlayer::ResetObserverMode()
    [396] CBasePlayer::ValidateCurrentObserverTarget()
    [397] CBasePlayer::AttemptToExitFreezeCam()
    [398] CBasePlayer::StartReplayMode(float, float, int)
    [399] CBasePlayer::StopReplayMode()
    [400] CBasePlayer::GetDelayTicks()
    [401] CBasePlayer::GetReplayEntity()
    [402] CBasePlayer::CreateCorpse()
    [403] CBasePlayer::EntSelectSpawnPoint()
    [404] CBasePlayer::GetInVehicle(IServerVehicle*, int)
    [405] CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
    [406] CBasePlayer::OnVehicleStart()
    [407] CBasePlayer::OnVehicleEnd(Vector&)
    [408] CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
    [409] CBasePlayer::SelectLastItem()
    [410] CBasePlayer::SelectItem(char const*, int)
    [411] CBasePlayer::ItemPostFrame()
    [412] CBasePlayer::GiveNamedItem(char const*, int)
    [413] CBasePlayer::CheckTrainUpdate()
    [414] CBasePlayer::SetPlayerUnderwater(bool)
    [415] CBasePlayer::CanBreatheUnderwater() const
    [416] CBasePlayer::PlayerUse()
    [417] CBasePlayer::PlayUseDenySound()
    [418] CBasePlayer::FindUseEntity()
    [419] CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
    [420] CBasePlayer::PickupObject(CBaseEntity*, bool)
    [421] CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
    [422] CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
    [423] CBasePlayer::UpdateGeigerCounter()
    [424] CBasePlayer::GetAutoaimVector(float)
    [425] CBasePlayer::GetAutoaimVector(float, float)
    [426] CBasePlayer::GetAutoaimVector(autoaim_params_t&)
    [427] CBasePlayer::ShouldAutoaim()
    [428] CBasePlayer::ForceClientDllUpdate()
    [429] CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
    [430] CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
    [431] CBasePlayer::ChangeTeam(int, bool, bool, bool)
    [432] CBasePlayer::CanHearAndReadChatFrom(CBasePlayer*)
    [433] CBasePlayer::CanSpeak()
    [434] CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
    [435] CBasePlayer::CheckChatText(char*, int)
    [436] CBasePlayer::CreateRagdollEntity()
    [437] CBasePlayer::ShouldAnnounceAchievement()
    [438] CBasePlayer::EquipWearable(CEconWearable*)
    [439] CBasePlayer::RemoveWearable(CEconWearable*)
    [440] CBasePlayer::IsFollowingPhysics()
    [441] CBasePlayer::InitVCollision(Vector const&, Vector const&)
    [442] CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
    [443] CBasePlayer::Hints()
    [444] CBasePlayer::IsReadyToPlay()
    [445] CBasePlayer::IsReadyToSpawn()
    [446] CBasePlayer::ShouldGainInstantSpawn()
    [447] CBasePlayer::ResetPerRoundStats()
    [448] CBasePlayer::ResetScores()
    [449] CBasePlayer::EquipSuit(bool)
    [450] CBasePlayer::RemoveSuit()
    [451] CBasePlayer::GetPlayerMaxSpeed()
    [452] CBasePlayer::CommitSuicide(bool, bool)
    [453] CBasePlayer::CommitSuicide(Vector const&, bool, bool)
    [454] CBasePlayer::IsBot() const
    [455] CBasePlayer::IsBotOfType(int) const
    [456] CBasePlayer::GetBotType() const
    [457] CBasePlayer::CanPlayerTalk()
    [458] CBasePlayer::GetExpresser()
    [459] CBasePlayer::Internal_HandleMapEvent(inputdata_t&)
    [460] CBasePlayer::SpawnArmorValue() const
    [461] CBasePlayer::NetworkStateChanged_m_ArmorValue()
    [462] CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
    [463] CBasePlayer::HasHaptics()
    [464] CBasePlayer::SetHaptics(bool)
    [465] CBasePlayer::PlayerSolidMask(bool) const
    [466] CBasePlayer::BHaveChatSuspensionInCurrentMatch()
    [467] CBasePlayer::OnVoiceTransmit()
