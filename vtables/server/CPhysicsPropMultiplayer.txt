VTable for CPhysicsPropMultiplayer:
    [0] CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CPhysicsPropMultiplayer::GetServerClass()
    [10] CPhysicsPropMultiplayer::YouForgotToImplementOrDeclareServerClass()
    [11] CPhysicsPropMultiplayer::GetDataDescMap()
    [12] CBaseAnimating::GetScriptDesc()
    [13] CBaseEntity::SetModelIndexOverride(int, int)
    [14] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [16] CPhysicsPropMultiplayer::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [17] CBaseEntity::ShouldCollide(int, int) const
    [18] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [19] CBaseEntity::SetScriptOwnerEntity(HSCRIPT__*)
    [20] CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
    [21] CBaseEntity::UpdateTransmitState()
    [22] CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
    [23] CBaseEntity::GetTracerType()
    [24] CPhysicsPropMultiplayer::Spawn()
    [25] CPhysicsProp::Precache()
    [26] CBaseAnimating::SetModel(char const*)
    [27] CBaseAnimating::OnNewModel()
    [28] CBaseEntity::PostConstructor(char const*)
    [29] CBaseEntity::PostClientActive()
    [30] CBaseEntity::ParseMapData(CEntityMapData*)
    [31] CBaseProp::KeyValue(char const*, char const*)
    [32] CBaseEntity::KeyValue(char const*, float)
    [33] CBaseEntity::KeyValue(char const*, Vector const&)
    [34] CBaseEntity::GetKeyValue(char const*, char*, int)
    [35] CBaseProp::Activate()
    [36] CBaseEntity::SetParent(CBaseEntity*, int)
    [37] CPhysicsProp::ObjectCaps()
    [38] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [39] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [40] CBaseProp::DrawDebugGeometryOverlays()
    [41] CPhysicsProp::DrawDebugTextOverlays()
    [42] CBaseEntity::Save(ISave&)
    [43] CBaseAnimating::Restore(IRestore&)
    [44] CBaseEntity::ShouldSavePhysics()
    [45] CBaseEntity::OnSave(IEntitySaveUtils*)
    [46] CBaseAnimating::OnRestore()
    [47] CBaseEntity::RequiredEdictIndex()
    [48] CBaseEntity::MoveDone()
    [49] CBaseEntity::Think()
    [50] CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
    [51] CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
    [52] CBaseAnimating::GetBaseAnimating()
    [53] CBaseEntity::GetResponseSystem()
    [54] CBaseEntity::DispatchResponse(char const*)
    [55] CBaseEntity::Classify()
    [56] CBaseEntity::DeathNotice(CBaseEntity*)
    [57] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [58] CBreakableProp::GetAutoAimRadius()
    [59] CBaseEntity::GetAutoAimCenter()
    [60] CBaseEntity::GetBeamTraceFilter()
    [61] CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    [62] CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [63] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [64] CPhysicsProp::OnTakeDamage(CTakeDamageInfo const&)
    [65] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [66] CBaseEntity::TakeHealth(float, int)
    [67] CBaseProp::IsAlive()
    [68] CBreakableProp::Event_Killed(CTakeDamageInfo const&)
    [69] CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [70] CBaseEntity::BloodColor()
    [71] CBaseEntity::IsTriggered(CBaseEntity*)
    [72] CBaseEntity::IsNPC() const
    [73] CBaseEntity::MyCombatCharacterPointer()
    [74] CBaseEntity::MyNextBotPointer()
    [75] CBaseEntity::GetDelay()
    [76] CBaseEntity::IsMoving()
    [77] CBaseEntity::DamageDecal(int, int)
    [78] CBaseEntity::DecalTrace(CGameTrace*, char const*)
    [79] CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    [80] CBaseEntity::OnControls(CBaseEntity*)
    [81] CBaseEntity::HasTarget(string_t)
    [82] CBaseEntity::IsPlayer() const
    [83] CBaseEntity::IsNetClient() const
    [84] CBaseEntity::IsTemplate()
    [85] CBaseEntity::IsBaseObject() const
    [86] CBaseEntity::IsBaseTrain() const
    [87] CBaseEntity::IsCombatItem() const
    [88] CBaseEntity::IsProjectileCollisionTarget() const
    [89] CBaseEntity::IsFuncLOD() const
    [90] CBaseEntity::IsBaseProjectile() const
    [91] CBaseEntity::IsBaseCombatWeapon() const
    [92] CBaseEntity::IsWearable() const
    [93] CBaseEntity::MyCombatWeaponPointer()
    [94] CBaseEntity::GetServerVehicle()
    [95] CBaseEntity::IsViewable()
    [96] CBaseEntity::ChangeTeam(int)
    [97] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [98] CBaseEntity::CanStandOn(CBaseEntity*) const
    [99] CBaseEntity::CanStandOn(edict_t*) const
    [100] CBaseEntity::GetEnemy()
    [101] CBaseEntity::GetEnemy() const
    [102] CPhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [103] CBaseEntity::StartTouch(CBaseEntity*)
    [104] CBaseEntity::Touch(CBaseEntity*)
    [105] CBaseEntity::EndTouch(CBaseEntity*)
    [106] CBaseEntity::StartBlocked(CBaseEntity*)
    [107] CBaseEntity::Blocked(CBaseEntity*)
    [108] CBaseEntity::EndBlocked()
    [109] CBaseEntity::PhysicsSimulate()
    [110] CBaseEntity::UpdateOnRemove()
    [111] CBaseEntity::StopLoopingSounds()
    [112] CBaseEntity::SUB_AllowedToFade()
    [113] CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
    [114] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [115] CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
    [116] CBaseEntity::GetTracerAttachment()
    [117] CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    [118] CBaseEntity::DoImpactEffect(CGameTrace&, int)
    [119] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [120] CBaseEntity::Respawn()
    [121] CBaseEntity::IsLockedByMaster()
    [122] CBaseEntity::GetMaxHealth() const
    [123] CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [124] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [125] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [126] CBaseEntity::NetworkStateChanged_m_iHealth()
    [127] CBaseEntity::NetworkStateChanged_m_iHealth(void*)
    [128] CBaseEntity::NetworkStateChanged_m_lifeState()
    [129] CBaseEntity::NetworkStateChanged_m_lifeState(void*)
    [130] CBaseEntity::NetworkStateChanged_m_takedamage()
    [131] CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    [132] CBaseEntity::RunVScripts()
    [133] CBaseEntity::GetDamageType() const
    [134] CBaseEntity::GetDamage()
    [135] CBaseEntity::SetDamage(float)
    [136] CBaseEntity::EyePosition()
    [137] CBaseEntity::EyeAngles()
    [138] CBaseEntity::LocalEyeAngles()
    [139] CBaseEntity::EarPosition()
    [140] CBaseEntity::BodyTarget(Vector const&, bool)
    [141] CBaseEntity::HeadTarget(Vector const&)
    [142] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [143] CBaseEntity::GetViewOffset() const
    [144] CBaseEntity::SetViewOffset(Vector const&)
    [145] CBaseEntity::GetSmoothedVelocity()
    [146] CBaseAnimating::GetVelocity(Vector*, Vector*)
    [147] CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
    [148] CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
    [149] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [150] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [151] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [152] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [153] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [154] CBaseEntity::Splash()
    [155] CBaseEntity::WorldSpaceCenter() const
    [156] CBaseEntity::GetSoundEmissionOrigin() const
    [157] CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    [158] CBaseEntity::IsDeflectable()
    [159] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [160] CPhysicsProp::CreateVPhysics()
    [161] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [162] CBaseEntity::VPhysicsDestroyObject()
    [163] CPhysicsPropMultiplayer::VPhysicsUpdate(IPhysicsObject*)
    [164] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [165] CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [166] CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
    [167] CPhysicsProp::VPhysicsCollision(int, gamevcollisionevent_t*)
    [168] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [169] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [170] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [171] CBaseEntity::VPhysicsIsFlesh()
    [172] CBreakableProp::HasPhysicsAttacker(float)
    [173] CBaseEntity::PhysicsSolidMaskForEntity() const
    [174] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [175] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [176] CBaseAnimating::GetStepOrigin() const
    [177] CBaseAnimating::GetStepAngles() const
    [178] CBaseEntity::ShouldDrawWaterImpacts()
    [179] CBaseEntity::NetworkStateChanged_m_fFlags()
    [180] CBaseEntity::NetworkStateChanged_m_fFlags(void*)
    [181] CBaseEntity::NetworkStateChanged_m_nWaterLevel()
    [182] CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
    [183] CBaseEntity::NetworkStateChanged_m_hGroundEntity()
    [184] CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
    [185] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
    [186] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
    [187] CBaseEntity::NetworkStateChanged_m_flFriction()
    [188] CBaseEntity::NetworkStateChanged_m_flFriction(void*)
    [189] CBaseEntity::NetworkStateChanged_m_vecVelocity()
    [190] CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
    [191] CBaseEntity::NetworkStateChanged_m_vecViewOffset()
    [192] CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
    [193] CBaseEntity::ShouldBlockNav() const
    [194] CBaseEntity::ShouldForceTransmitsForTeam(int)
    [195] CBaseEntity::IsTruceValidForEnt() const
    [196] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [197] CBaseEntity::BCanCallVote()
    [198] CBaseAnimating::GetIdealSpeed() const
    [199] CBaseAnimating::GetIdealAccel() const
    [200] CBaseAnimating::StudioFrameAdvance()
    [201] CBaseAnimating::SetSequence(int)
    [202] CBaseAnimating::IsActivityFinished()
    [203] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [204] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [205] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [206] CBaseAnimating::IsRagdoll()
    [207] CBaseAnimating::CanBecomeRagdoll()
    [208] CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [209] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [210] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [211] CBaseAnimating::CalculateIKLocks(float)
    [212] CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
    [213] CBaseAnimating::HandleAnimEvent(animevent_t*)
    [214] CBaseAnimating::PopulatePoseParameters()
    [215] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [216] CBaseAnimating::InitBoneControllers()
    [217] CBaseAnimating::GetGroundSpeedVelocity()
    [218] CBaseAnimating::RefreshCollisionBounds()
    [219] CBreakableProp::Ignite(float, bool, float, bool)
    [220] CBaseAnimating::IgniteLifetime(float)
    [221] CBaseAnimating::IgniteNumHitboxFires(int)
    [222] CBaseAnimating::IgniteHitboxFireScale(float)
    [223] CBaseAnimating::Extinguish()
    [224] CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
    [225] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [226] CPhysicsProp::OverridePropdata()
    [227] CBreakableProp::PlayPuntSound()
    [228] CBreakableProp::GetRootPhysicsObjectForBreak()
    [229] CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
    [230] CBreakableProp::PreferredCarryAngles()
    [231] CBreakableProp::SetDmgModBullet(float)
    [232] CBreakableProp::SetDmgModClub(float)
    [233] CBreakableProp::SetDmgModExplosive(float)
    [234] CBreakableProp::GetDmgModBullet()
    [235] CBreakableProp::GetDmgModClub()
    [236] CBreakableProp::GetDmgModExplosive()
    [237] CBreakableProp::SetExplosiveRadius(float)
    [238] CBreakableProp::SetExplosiveDamage(float)
    [239] CBreakableProp::GetExplosiveRadius()
    [240] CBreakableProp::GetExplosiveDamage()
    [241] CBreakableProp::SetPhysicsDamageTable(string_t)
    [242] CBreakableProp::GetPhysicsDamageTable()
    [243] CBreakableProp::SetBreakableModel(string_t)
    [244] CBreakableProp::GetBreakableModel()
    [245] CBreakableProp::SetBreakableSkin(int)
    [246] CBreakableProp::GetBreakableSkin()
    [247] CBreakableProp::SetBreakableCount(int)
    [248] CBreakableProp::GetBreakableCount()
    [249] CBreakableProp::SetMaxBreakableSize(int)
    [250] CBreakableProp::GetMaxBreakableSize()
    [251] CBreakableProp::SetPropDataBlocksLOS(bool)
    [252] CBreakableProp::SetPropDataIsAIWalkable(bool)
    [253] CBreakableProp::SetBasePropData(string_t)
    [254] CBreakableProp::GetBasePropData()
    [255] CBreakableProp::SetInteraction(propdata_interactions_t)
    [256] CBreakableProp::HasInteraction(propdata_interactions_t)
    [257] CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
    [258] CBreakableProp::GetMultiplayerBreakMode() const
    [259] CPhysicsPropMultiplayer::SetPhysicsMode(int)
    [260] CPhysicsPropMultiplayer::GetPhysicsMode()
    [261] CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
    [262] CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
    [263] CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
    [264] CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
    [265] CBreakableProp::PhysGunLaunchAngularImpulse()
    [266] CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
    [267] CPhysicsPropMultiplayer::GetMass()
    [268] CPhysicsPropMultiplayer::IsAsleep()
