VTable for CryptoPP::EuclideanDomainOf<CryptoPP::Integer>:
    [0] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::~EuclideanDomainOf()
    [1] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [2] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Identity() const
    [3] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [4] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Inverse(CryptoPP::Integer const&) const
    [5] CryptoPP::AbstractGroup<CryptoPP::Integer>::InversionIsFast() const
    [6] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Double(CryptoPP::Integer const&) const
    [7] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [8] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
    [9] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
    [10] CryptoPP::AbstractGroup<CryptoPP::Integer>::ScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [11] CryptoPP::AbstractGroup<CryptoPP::Integer>::CascadeScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [12] CryptoPP::AbstractGroup<CryptoPP::Integer>::SimultaneousMultiply(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
    [13] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::IsUnit(CryptoPP::Integer const&) const
    [14] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeIdentity() const
    [15] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Multiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [16] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeInverse(CryptoPP::Integer const&) const
    [17] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Square(CryptoPP::Integer const&) const
    [18] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Divide(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [19] CryptoPP::AbstractRing<CryptoPP::Integer>::Exponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [20] CryptoPP::AbstractRing<CryptoPP::Integer>::CascadeExponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [21] CryptoPP::AbstractRing<CryptoPP::Integer>::SimultaneousExponentiate(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
    [22] CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroup() const
    [23] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::DivisionAlgorithm(CryptoPP::Integer&, CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [24] CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Mod(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    [25] CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>::Gcd(CryptoPP::Integer const&, CryptoPP::Integer const&) const
VTable for CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>:
    [0] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::~EuclideanDomainOf()
    [1] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Equal(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [2] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Identity() const
    [3] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Add(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [4] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Inverse(CryptoPP::PolynomialMod2 const&) const
    [5] CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::InversionIsFast() const
    [6] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Double(CryptoPP::PolynomialMod2 const&) const
    [7] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Subtract(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [8] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Accumulate(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    [9] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Reduce(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    [10] CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::ScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    [11] CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::CascadeScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    [12] CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::SimultaneousMultiply(CryptoPP::PolynomialMod2*, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const*, unsigned int) const
    [13] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::IsUnit(CryptoPP::PolynomialMod2 const&) const
    [14] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::MultiplicativeIdentity() const
    [15] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Multiply(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [16] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::MultiplicativeInverse(CryptoPP::PolynomialMod2 const&) const
    [17] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Square(CryptoPP::PolynomialMod2 const&) const
    [18] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Divide(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [19] CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::Exponentiate(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    [20] CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::CascadeExponentiate(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    [21] CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::SimultaneousExponentiate(CryptoPP::PolynomialMod2*, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const*, unsigned int) const
    [22] CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroup() const
    [23] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::DivisionAlgorithm(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [24] CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Mod(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    [25] CryptoPP::AbstractEuclideanDomain<CryptoPP::PolynomialMod2>::Gcd(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
