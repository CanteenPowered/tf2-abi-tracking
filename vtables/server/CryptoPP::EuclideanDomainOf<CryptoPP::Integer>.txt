VTable for CryptoPP::EuclideanDomainOf<CryptoPP::Integer>:
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::~EuclideanDomainOf()
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Identity() const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Inverse(CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::Integer>::InversionIsFast() const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Double(CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::Integer>::ScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::Integer>::CascadeScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::Integer>::SimultaneousMultiply(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::IsUnit(CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeIdentity() const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Multiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeInverse(CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Square(CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Divide(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::Exponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::CascadeExponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::SimultaneousExponentiate(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
    CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroup() const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::DivisionAlgorithm(CryptoPP::Integer&, CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Mod(CryptoPP::Integer const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>::Gcd(CryptoPP::Integer const&, CryptoPP::Integer const&) const
VTable for CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>:
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::~EuclideanDomainOf()
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Equal(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Identity() const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Add(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Inverse(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::InversionIsFast() const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Double(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Subtract(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Accumulate(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Reduce(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::ScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::CascadeScalarMultiply(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::SimultaneousMultiply(CryptoPP::PolynomialMod2*, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const*, unsigned int) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::IsUnit(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::MultiplicativeIdentity() const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Multiply(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::MultiplicativeInverse(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Square(CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Divide(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::Exponentiate(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::CascadeExponentiate(CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const&) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::SimultaneousExponentiate(CryptoPP::PolynomialMod2*, CryptoPP::PolynomialMod2 const&, CryptoPP::Integer const*, unsigned int) const
    CryptoPP::AbstractRing<CryptoPP::PolynomialMod2>::MultiplicativeGroup() const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::DivisionAlgorithm(CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2&, CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::Mod(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
    CryptoPP::AbstractEuclideanDomain<CryptoPP::PolynomialMod2>::Gcd(CryptoPP::PolynomialMod2 const&, CryptoPP::PolynomialMod2 const&) const
