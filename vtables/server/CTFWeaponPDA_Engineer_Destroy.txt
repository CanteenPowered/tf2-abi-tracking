VTable for CTFWeaponPDA_Engineer_Destroy:
    [0] CTFWeaponPDA_Engineer_Destroy::~CTFWeaponPDA_Engineer_Destroy()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CTFWeaponPDA_Engineer_Destroy::GetServerClass()
    [10] CTFWeaponPDA_Engineer_Destroy::YouForgotToImplementOrDeclareServerClass()
    [11] CTFWeaponPDA::GetDataDescMap()
    [12] CTFWeaponBase::GetScriptDesc()
    [13] CBaseEntity::SetModelIndexOverride(int, int)
    [14] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [16] CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [17] CBaseEntity::ShouldCollide(int, int) const
    [18] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [19] CBaseEntity::SetScriptOwnerEntity(HSCRIPT__*)
    [20] CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
    [21] CBaseCombatWeapon::UpdateTransmitState()
    [22] CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
    [23] CTFWeaponBase::GetTracerType()
    [24] CTFWeaponPDA::Spawn()
    [25] CTFWeaponPDA::Precache()
    [26] CBaseAnimating::SetModel(char const*)
    [27] CEconEntity::OnNewModel()
    [28] CBaseEntity::PostConstructor(char const*)
    [29] CBaseEntity::PostClientActive()
    [30] CBaseEntity::ParseMapData(CEntityMapData*)
    [31] CBaseEntity::KeyValue(char const*, char const*)
    [32] CBaseEntity::KeyValue(char const*, float)
    [33] CBaseEntity::KeyValue(char const*, Vector const&)
    [34] CBaseEntity::GetKeyValue(char const*, char*, int)
    [35] CTFWeaponBase::Activate()
    [36] CBaseEntity::SetParent(CBaseEntity*, int)
    [37] CBaseCombatWeapon::ObjectCaps()
    [38] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [39] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [40] CBaseEntity::DrawDebugGeometryOverlays()
    [41] CBaseAnimating::DrawDebugTextOverlays()
    [42] CBaseEntity::Save(ISave&)
    [43] CBaseAnimating::Restore(IRestore&)
    [44] CBaseEntity::ShouldSavePhysics()
    [45] CBaseEntity::OnSave(IEntitySaveUtils*)
    [46] CBaseAnimating::OnRestore()
    [47] CBaseEntity::RequiredEdictIndex()
    [48] CBaseEntity::MoveDone()
    [49] CBaseEntity::Think()
    [50] CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick()
    [51] CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void*)
    [52] CBaseAnimating::GetBaseAnimating()
    [53] CBaseEntity::GetResponseSystem()
    [54] CBaseEntity::DispatchResponse(char const*)
    [55] CBaseEntity::Classify()
    [56] CBaseEntity::DeathNotice(CBaseEntity*)
    [57] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [58] CBaseEntity::GetAutoAimRadius()
    [59] CBaseEntity::GetAutoAimCenter()
    [60] CBaseEntity::GetBeamTraceFilter()
    [61] CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
    [62] CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [63] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [64] CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
    [65] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [66] CBaseEntity::TakeHealth(float, int)
    [67] CBaseEntity::IsAlive()
    [68] CBaseEntity::Event_Killed(CTakeDamageInfo const&)
    [69] CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [70] CBaseEntity::BloodColor()
    [71] CBaseEntity::IsTriggered(CBaseEntity*)
    [72] CBaseEntity::IsNPC() const
    [73] CBaseEntity::MyCombatCharacterPointer()
    [74] CBaseEntity::MyNextBotPointer()
    [75] CBaseEntity::GetDelay()
    [76] CBaseEntity::IsMoving()
    [77] CBaseEntity::DamageDecal(int, int)
    [78] CBaseEntity::DecalTrace(CGameTrace*, char const*)
    [79] CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
    [80] CBaseEntity::OnControls(CBaseEntity*)
    [81] CBaseEntity::HasTarget(string_t)
    [82] CBaseEntity::IsPlayer() const
    [83] CBaseEntity::IsNetClient() const
    [84] CBaseEntity::IsTemplate()
    [85] CBaseEntity::IsBaseObject() const
    [86] CBaseEntity::IsBaseTrain() const
    [87] CBaseEntity::IsCombatItem() const
    [88] CBaseEntity::IsProjectileCollisionTarget() const
    [89] CBaseEntity::IsFuncLOD() const
    [90] CBaseEntity::IsBaseProjectile() const
    [91] CBaseCombatWeapon::IsBaseCombatWeapon() const
    [92] CBaseEntity::IsWearable() const
    [93] CBaseCombatWeapon::MyCombatWeaponPointer()
    [94] CBaseEntity::GetServerVehicle()
    [95] CBaseEntity::IsViewable()
    [96] CTFWeaponBase::ChangeTeam(int)
    [97] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [98] CBaseEntity::CanStandOn(CBaseEntity*) const
    [99] CBaseEntity::CanStandOn(edict_t*) const
    [100] CBaseEntity::GetEnemy()
    [101] CBaseEntity::GetEnemy() const
    [102] CTFWeaponBase::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [103] CBaseEntity::StartTouch(CBaseEntity*)
    [104] CBaseEntity::Touch(CBaseEntity*)
    [105] CBaseEntity::EndTouch(CBaseEntity*)
    [106] CBaseEntity::StartBlocked(CBaseEntity*)
    [107] CBaseEntity::Blocked(CBaseEntity*)
    [108] CBaseEntity::EndBlocked()
    [109] CBaseEntity::PhysicsSimulate()
    [110] CTFWeaponBase::UpdateOnRemove()
    [111] CBaseEntity::StopLoopingSounds()
    [112] CBaseEntity::SUB_AllowedToFade()
    [113] CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
    [114] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [115] CBaseCombatWeapon::MakeTracer(Vector const&, CGameTrace const&, int)
    [116] CBaseEntity::GetTracerAttachment()
    [117] CBaseEntity::FireBullets(FireBulletsInfo_t const&)
    [118] CBaseEntity::DoImpactEffect(CGameTrace&, int)
    [119] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [120] CTFWeaponBase::Respawn()
    [121] CBaseEntity::IsLockedByMaster()
    [122] CBaseEntity::GetMaxHealth() const
    [123] CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [124] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [125] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [126] CBaseEntity::NetworkStateChanged_m_iHealth()
    [127] CBaseEntity::NetworkStateChanged_m_iHealth(void*)
    [128] CBaseEntity::NetworkStateChanged_m_lifeState()
    [129] CBaseEntity::NetworkStateChanged_m_lifeState(void*)
    [130] CBaseEntity::NetworkStateChanged_m_takedamage()
    [131] CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    [132] CBaseEntity::RunVScripts()
    [133] CTFWeaponBase::GetDamageType() const
    [134] CBaseEntity::GetDamage()
    [135] CBaseEntity::SetDamage(float)
    [136] CBaseEntity::EyePosition()
    [137] CBaseEntity::EyeAngles()
    [138] CBaseEntity::LocalEyeAngles()
    [139] CBaseEntity::EarPosition()
    [140] CBaseEntity::BodyTarget(Vector const&, bool)
    [141] CBaseEntity::HeadTarget(Vector const&)
    [142] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [143] CBaseEntity::GetViewOffset() const
    [144] CBaseEntity::SetViewOffset(Vector const&)
    [145] CBaseEntity::GetSmoothedVelocity()
    [146] CBaseAnimating::GetVelocity(Vector*, Vector*)
    [147] CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
    [148] CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
    [149] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [150] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [151] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [152] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [153] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [154] CBaseEntity::Splash()
    [155] CBaseEntity::WorldSpaceCenter() const
    [156] CBaseEntity::GetSoundEmissionOrigin() const
    [157] CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    [158] CBaseEntity::IsDeflectable()
    [159] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [160] CBaseEntity::CreateVPhysics()
    [161] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [162] CBaseEntity::VPhysicsDestroyObject()
    [163] CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
    [164] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [165] CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [166] CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
    [167] CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
    [168] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [169] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [170] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [171] CBaseEntity::VPhysicsIsFlesh()
    [172] CBaseEntity::HasPhysicsAttacker(float)
    [173] CBaseEntity::PhysicsSolidMaskForEntity() const
    [174] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [175] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [176] CBaseAnimating::GetStepOrigin() const
    [177] CBaseAnimating::GetStepAngles() const
    [178] CBaseEntity::ShouldDrawWaterImpacts()
    [179] CBaseEntity::NetworkStateChanged_m_fFlags()
    [180] CBaseEntity::NetworkStateChanged_m_fFlags(void*)
    [181] CBaseEntity::NetworkStateChanged_m_nWaterLevel()
    [182] CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
    [183] CBaseEntity::NetworkStateChanged_m_hGroundEntity()
    [184] CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
    [185] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
    [186] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
    [187] CBaseEntity::NetworkStateChanged_m_flFriction()
    [188] CBaseEntity::NetworkStateChanged_m_flFriction(void*)
    [189] CBaseEntity::NetworkStateChanged_m_vecVelocity()
    [190] CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
    [191] CBaseEntity::NetworkStateChanged_m_vecViewOffset()
    [192] CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
    [193] CBaseEntity::ShouldBlockNav() const
    [194] CBaseEntity::ShouldForceTransmitsForTeam(int)
    [195] CBaseEntity::IsTruceValidForEnt() const
    [196] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [197] CBaseEntity::BCanCallVote()
    [198] CBaseAnimating::GetIdealSpeed() const
    [199] CBaseAnimating::GetIdealAccel() const
    [200] CBaseAnimating::StudioFrameAdvance()
    [201] CBaseAnimating::SetSequence(int)
    [202] CBaseAnimating::IsActivityFinished()
    [203] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [204] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [205] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [206] CBaseAnimating::IsRagdoll()
    [207] CBaseAnimating::CanBecomeRagdoll()
    [208] CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [209] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [210] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [211] CBaseAnimating::CalculateIKLocks(float)
    [212] CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
    [213] CBaseCombatWeapon::HandleAnimEvent(animevent_t*)
    [214] CBaseAnimating::PopulatePoseParameters()
    [215] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [216] CBaseAnimating::InitBoneControllers()
    [217] CBaseAnimating::GetGroundSpeedVelocity()
    [218] CBaseAnimating::RefreshCollisionBounds()
    [219] CBaseAnimating::Ignite(float, bool, float, bool)
    [220] CBaseAnimating::IgniteLifetime(float)
    [221] CBaseAnimating::IgniteNumHitboxFires(int)
    [222] CBaseAnimating::IgniteHitboxFireScale(float)
    [223] CBaseAnimating::Extinguish()
    [224] CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
    [225] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [226] CBaseCombatWeapon::GiveTo(CBaseEntity*)
    [227] CEconEntity::CalculateVisibleClassFor(CBaseCombatCharacter*)
    [228] CEconEntity::GetAttributeManager()
    [229] CEconEntity::GetAttributeContainer()
    [230] CEconEntity::GetAttributeOwner()
    [231] CEconEntity::GetAttributeList()
    [232] CTFWeaponBase::ReapplyProvision()
    [233] CEconEntity::UpdateBodygroups(CBaseCombatCharacter*, int)
    [234] CTFWeaponBase::TranslateViewmodelHandActivityInternal(Activity)
    [235] CTFWeaponBase::IsPredicted() const
    [236] CBaseCombatWeapon::GetSubType()
    [237] CBaseCombatWeapon::SetSubType(int)
    [238] CTFWeaponBase::Equip(CBaseCombatCharacter*)
    [239] CTFWeaponBase::Drop(Vector const&)
    [240] CBaseCombatWeapon::UpdateClientData(CBasePlayer*)
    [241] CBaseCombatWeapon::IsAllowedToSwitch()
    [242] CTFWeaponPDA::CanBeSelected()
    [243] CTFWeaponPDA_Engineer_Destroy::VisibleInWeaponSelection()
    [244] CTFWeaponBase::HasAmmo()
    [245] CBaseCombatWeapon::SetPickupTouch()
    [246] CBaseCombatWeapon::DefaultTouch(CBaseEntity*)
    [247] CBaseCombatWeapon::ShouldDisplayAltFireHUDHint()
    [248] CBaseCombatWeapon::DisplayAltFireHudHint()
    [249] CBaseCombatWeapon::RescindAltFireHudHint()
    [250] CBaseCombatWeapon::ShouldDisplayReloadHUDHint()
    [251] CBaseCombatWeapon::DisplayReloadHudHint()
    [252] CBaseCombatWeapon::RescindReloadHudHint()
    [253] CBaseCombatWeapon::SetViewModelIndex(int)
    [254] CTFWeaponBase::SendWeaponAnim(int)
    [255] CBaseCombatWeapon::SendViewModelAnim(int)
    [256] CBaseCombatWeapon::SetViewModel()
    [257] CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
    [258] CBaseCombatWeapon::SetWeaponIdleTime(float)
    [259] CBaseCombatWeapon::GetWeaponIdleTime()
    [260] CBaseCombatWeapon::HasAnyAmmo()
    [261] CTFWeaponPDA::HasPrimaryAmmo()
    [262] CBaseCombatWeapon::HasSecondaryAmmo()
    [263] CTFWeaponBase::CanHolster() const
    [264] CBaseCombatWeapon::DefaultDeploy(char*, char*, int, char*)
    [265] CBaseCombatWeapon::CanDeploy()
    [266] CTFWeaponBase::Deploy()
    [267] CTFWeaponBase::Holster(CBaseCombatWeapon*)
    [268] CBaseCombatWeapon::GetLastWeapon()
    [269] CTFWeaponBase::SetWeaponVisible(bool)
    [270] CBaseCombatWeapon::IsWeaponVisible()
    [271] CBaseCombatWeapon::ReloadOrSwitchWeapons()
    [272] CTFWeaponBase::OnActiveStateChanged(int)
    [273] CBaseCombatWeapon::HolsterOnDetach()
    [274] CBaseCombatWeapon::IsHolstered()
    [275] CTFWeaponBase::Detach()
    [276] CBaseCombatWeapon::ItemPreFrame()
    [277] CTFWeaponBase::ItemPostFrame()
    [278] CTFWeaponBase::ItemBusyFrame()
    [279] CTFWeaponBase::ItemHolsterFrame()
    [280] CTFWeaponBase::WeaponIdle()
    [281] CBaseCombatWeapon::HandleFireOnEmpty()
    [282] CTFWeaponBase::CanPerformSecondaryAttack() const
    [283] CBaseCombatWeapon::ShouldBlockPrimaryFire()
    [284] CBaseCombatWeapon::IsWeaponZoomed()
    [285] CTFWeaponBase::CheckReload()
    [286] CTFWeaponBase::FinishReload()
    [287] CTFWeaponBase::AbortReload()
    [288] CTFWeaponBase::Reload()
    [289] CTFWeaponBase::AutoFiresFullClip() const
    [290] CBaseCombatWeapon::UpdateAutoFire()
    [291] CTFWeaponPDA::PrimaryAttack()
    [292] CTFWeaponPDA::SecondaryAttack()
    [293] CBaseCombatWeapon::GetPrimaryAttackActivity()
    [294] CBaseCombatWeapon::GetSecondaryAttackActivity()
    [295] CBaseCombatWeapon::GetDrawActivity()
    [296] CBaseCombatWeapon::GetDefaultAnimSpeed()
    [297] CBaseCombatWeapon::GetBulletType()
    [298] CTFWeaponBase::GetBulletSpread()
    [299] CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
    [300] CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
    [301] CBaseCombatWeapon::GetFireRate()
    [302] CBaseCombatWeapon::GetMinBurst()
    [303] CBaseCombatWeapon::GetMaxBurst()
    [304] CBaseCombatWeapon::GetMinRestTime()
    [305] CBaseCombatWeapon::GetMaxRestTime()
    [306] CBaseCombatWeapon::GetRandomBurst()
    [307] CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
    [308] CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
    [309] CBaseCombatWeapon::GetProficiencyValues()
    [310] CBaseCombatWeapon::GetMaxAutoAimDeflection()
    [311] CBaseCombatWeapon::WeaponAutoAimScale()
    [312] CBaseCombatWeapon::StartSprinting()
    [313] CBaseCombatWeapon::StopSprinting()
    [314] CBaseCombatWeapon::GetDamage(float, int)
    [315] CBaseCombatWeapon::SetActivity(Activity, float)
    [316] CBaseCombatWeapon::AddViewKick()
    [317] CBaseCombatWeapon::GetDeathNoticeName()
    [318] CBaseCombatWeapon::OnPickedUp(CBaseCombatCharacter*)
    [319] CBaseCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
    [320] CBaseCombatWeapon::CalcViewmodelBob()
    [321] CTFWeaponPDA::GetControlPanelInfo(int, char const*&)
    [322] CBaseCombatWeapon::GetControlPanelClassName(int, char const*&)
    [323] CTFWeaponPDA::ShouldShowControlPanels()
    [324] CBaseCombatWeapon::CanBePickedUpByNPCs()
    [325] CBaseCombatWeapon::GetSkinOverride() const
    [326] CTFWeaponBase::GetViewModel(int) const
    [327] CTFWeaponBase::GetWorldModel() const
    [328] CBaseCombatWeapon::GetAnimPrefix() const
    [329] CTFWeaponBase::GetMaxClip1() const
    [330] CBaseCombatWeapon::GetMaxClip2() const
    [331] CTFWeaponBase::GetDefaultClip1() const
    [332] CBaseCombatWeapon::GetDefaultClip2() const
    [333] CBaseCombatWeapon::GetWeight() const
    [334] CBaseCombatWeapon::AllowsAutoSwitchTo() const
    [335] CBaseCombatWeapon::AllowsAutoSwitchFrom() const
    [336] CTFWeaponBase::ForceWeaponSwitch() const
    [337] CBaseCombatWeapon::GetWeaponFlags() const
    [338] CBaseCombatWeapon::GetSlot() const
    [339] CBaseCombatWeapon::GetPosition() const
    [340] CBaseCombatWeapon::GetName() const
    [341] CBaseCombatWeapon::GetPrintName() const
    [342] CTFWeaponBase::GetShootSound(int) const
    [343] CBaseCombatWeapon::GetRumbleEffect() const
    [344] CBaseCombatWeapon::UsesClipsForAmmo1() const
    [345] CBaseCombatWeapon::UsesClipsForAmmo2() const
    [346] CBaseCombatWeapon::GetEncryptionKey()
    [347] CBaseCombatWeapon::GetPrimaryAmmoType() const
    [348] CBaseCombatWeapon::GetSecondaryAmmoType() const
    [349] CTFWeaponBase::Clip1()
    [350] CTFWeaponBase::Clip2()
    [351] CBaseCombatWeapon::GetSpriteActive() const
    [352] CBaseCombatWeapon::GetSpriteInactive() const
    [353] CBaseCombatWeapon::GetSpriteAmmo() const
    [354] CBaseCombatWeapon::GetSpriteAmmo2() const
    [355] CBaseCombatWeapon::GetSpriteCrosshair() const
    [356] CBaseCombatWeapon::GetSpriteAutoaim() const
    [357] CBaseCombatWeapon::GetSpriteZoomedCrosshair() const
    [358] CBaseCombatWeapon::GetSpriteZoomedAutoaim() const
    [359] CTFWeaponBase::ActivityOverride(Activity, bool*)
    [360] CTFWeaponBase::ActivityList(int&)
    [361] CBaseCombatWeapon::ShouldUseLargeViewModelVROverride()
    [362] CTFWeaponBase::FallInit()
    [363] CBaseCombatWeapon::FallThink()
    [364] CTFWeaponBase::Materialize()
    [365] CTFWeaponBase::CheckRespawn()
    [366] CBaseCombatWeapon::Delete()
    [367] CBaseCombatWeapon::Kill()
    [368] CBaseCombatWeapon::CapabilitiesGet()
    [369] CBaseCombatWeapon::WeaponLOSCondition(Vector const&, Vector const&, bool)
    [370] CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
    [371] CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
    [372] CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
    [373] CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
    [374] CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter*)
    [375] CTFWeaponBase::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
    [376] CBaseCombatWeapon::Operator_ForceNPCFire(CBaseCombatCharacter*, bool)
    [377] CBaseCombatWeapon::GetDmgAccumulator()
    [378] CBaseCombatWeapon::CanLower()
    [379] CTFWeaponBase::Ready()
    [380] CTFWeaponBase::Lower()
    [381] CBaseCombatWeapon::HideThink()
    [382] CBaseCombatWeapon::CanReload()
    [383] CTFWeaponBase::GetNextSecondaryAttackDelay()
    [384] CTFWeaponPDA_Engineer_Destroy::GetWeaponID() const
    [385] CTFWeaponBase::GetCustomDamageType() const
    [386] CTFWeaponBase::UsesPrimaryAmmo()
    [387] CTFWeaponBase::UberChargeAmmoPerShot()
    [388] CTFWeaponBase::GetPlayerPoseParamList(int&)
    [389] CTFWeaponBase::GetItemPoseParamList(int&)
    [390] CTFWeaponBase::GetOwnerViaInterface()
    [391] CTFWeaponBase::StartHolsterAnim()
    [392] CTFWeaponBase::UpdateHands()
    [393] CTFWeaponBase::OwnerCanTaunt()
    [394] CTFWeaponBase::CanBeCritBoosted()
    [395] CTFWeaponBase::GetTauntItem() const
    [396] CTFWeaponBase::UpdateExtraWearables()
    [397] CTFWeaponBase::ExtraWearableEquipped(CTFWearable*)
    [398] CTFWeaponBase::ExtraWearableViewModelEquipped(CTFWearable*)
    [399] CTFWeaponBase::HideAttachmentsAndShowBodygroupsWhenPerformingWeaponIndependentTaunt() const
    [400] CTFWeaponBase::RemoveExtraWearables()
    [401] CTFWeaponBase::Misfire()
    [402] CTFWeaponBase::FireFullClipAtOnce()
    [403] CTFWeaponBase::CalcIsAttackCriticalHelper()
    [404] CTFWeaponBase::CalcIsAttackCriticalHelperNoCrits()
    [405] CTFWeaponBase::GetPenetrateType() const
    [406] CTFWeaponBase::GetProjectileFireSetup(CTFPlayer*, Vector, Vector*, QAngle*, bool, float)
    [407] CTFWeaponBase::GetSpreadAngles()
    [408] CTFWeaponBase::IsFiring() const
    [409] CTFWeaponBase::AreRandomCritsEnabled()
    [410] CTFWeaponBase::DefaultReload(int, int, int)
    [411] CTFWeaponBase::IsReloading() const
    [412] CTFWeaponBase::GetReloadSpeedScale() const
    [413] CTFWeaponBase::CheckReloadMisfire()
    [414] CTFWeaponBase::CanDrop()
    [415] CTFWeaponBase::AllowTaunts()
    [416] CTFWeaponBase::ApplyFireDelay(float) const
    [417] CTFWeaponBase::GetActivityWeaponRole() const
    [418] CTFWeaponBase::GetViewModelWeaponRole()
    [419] CTFWeaponBase::AddAssociatedObject(CBaseObject*)
    [420] CTFWeaponBase::RemoveAssociatedObject(CBaseObject*)
    [421] CTFWeaponBase::ApplyOnHitAttributes(CBaseEntity*, CTFPlayer*, CTakeDamageInfo const&)
    [422] CTFWeaponBase::ApplyPostHitEffects(CTakeDamageInfo const&, CTFPlayer*)
    [423] CTFWeaponBase::ApplyOnInjuredAttributes(CTFPlayer*, CTFPlayer*, CTakeDamageInfo const&)
    [424] CTFWeaponBase::DeflectProjectiles()
    [425] CTFWeaponBase::DeflectPlayer(CTFPlayer*, CTFPlayer*, Vector&)
    [426] CTFWeaponBase::DeflectEntity(CBaseEntity*, CTFPlayer*, Vector&)
    [427] CTFWeaponBase::PlayDeflectionSound(bool)
    [428] CTFWeaponBase::GetDeflectionRadius() const
    [429] CTFWeaponBase::GetJarateTime()
    [430] CTFWeaponBase::CanAttack()
    [431] CTFWeaponBase::GetCanAttackFlags() const
    [432] CTFWeaponBase::WeaponReset()
    [433] CTFWeaponBase::WeaponRegenerate()
    [434] CTFWeaponBase::GetMuzzleFlashEffectName_3rd()
    [435] CTFWeaponBase::GetMuzzleFlashEffectName_1st()
    [436] CTFWeaponBase::GetMuzzleFlashModel()
    [437] CTFWeaponBase::GetMuzzleFlashModelLifetime()
    [438] CTFWeaponBase::GetMuzzleFlashParticleEffect()
    [439] CTFWeaponBase::GetInventoryModel()
    [440] CTFWeaponBase::GetSpeedMod()
    [441] CTFWeaponBase::CanFireCriticalShot(bool, CBaseEntity*)
    [442] CTFWeaponBase::CanFireRandomCriticalShot(float)
    [443] CTFWeaponBase::OnControlStunned()
    [444] CTFWeaponBase::HideWhileStunned()
    [445] CTFWeaponBase::IsViewModelFlipped()
    [446] CTFWeaponBase::GetMaxHealthMod()
    [447] CTFWeaponBase::GetLastDeployTime()
    [448] CTFWeaponBase::IsEnergyWeapon() const
    [449] CTFWeaponBase::IsBlastImpactWeapon() const
    [450] CTFWeaponBase::Energy_GetShotCost() const
    [451] CTFWeaponBase::Energy_GetRechargeCost() const
    [452] CTFWeaponBase::GetParticleColor(int)
    [453] CTFWeaponBase::HasLastShotCritical()
    [454] CTFWeaponBase::UseServerRandomSeed() const
    [455] CTFWeaponBase::IsBroken() const
    [456] CTFWeaponBase::SetBroken(bool)
    [457] CTFWeaponBase::OnBulletFire(int)
    [458] CTFWeaponBase::OnPlayerKill(CTFPlayer*, CTakeDamageInfo const&)
    [459] CTFWeaponBase::GetLastHitTime()
    [460] CTFWeaponBase::GetDropSkinOverride()
    [461] CTFWeaponBase::GetInitialAfterburnDuration() const
    [462] CTFWeaponBase::GetAfterburnRateOnHit() const
    [463] CTFWeaponBase::GetSkin()
    [464] CTFWeaponBase::GetEffectBarProgress()
    [465] CTFWeaponBase::CanPickupOtherWeapon() const
    [466] CTFWeaponBase::ShouldRemoveInvisibilityOnPrimaryAttack() const
    [467] CTFWeaponBase::GetEffectBarAmmo()
    [468] CTFWeaponBase::InternalGetEffectBarRechargeTime()
    [469] CTFWeaponPDA::CanInspect() const
    [470] CTFWeaponBase::HookAttributes()
    [471] CTFWeaponBase::OnUpgraded()
    [472] CTFWeaponPDA::ShouldDrawCrosshair()
    [473] CTFWeaponPDA_Engineer_Destroy::GetPanelName()
