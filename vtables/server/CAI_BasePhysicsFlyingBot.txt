VTable for CAI_BasePhysicsFlyingBot:
    [0] CAI_BasePhysicsFlyingBot::~CAI_BasePhysicsFlyingBot()
    [1] CBaseEntity::SetRefEHandle(CBaseHandle const&)
    [2] CBaseEntity::GetRefEHandle() const
    [3] CBaseEntity::GetCollideable()
    [4] CBaseEntity::GetNetworkable()
    [5] CBaseEntity::GetBaseEntity()
    [6] CBaseEntity::GetModelIndex() const
    [7] CBaseEntity::GetModelName() const
    [8] CBaseEntity::SetModelIndex(int)
    [9] CAI_BaseNPC::GetServerClass()
    [10] CAI_BaseNPC::YouForgotToImplementOrDeclareServerClass()
    [11] CAI_BasePhysicsFlyingBot::GetDataDescMap()
    [12] CBaseEntity::SetModelIndexOverride(int, int)
    [13] CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
    [14] CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
    [15] CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
    [16] CBaseEntity::ShouldCollide(int, int) const
    [17] CBaseEntity::SetOwnerEntity(CBaseEntity*)
    [18] CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
    [19] CAI_BaseNPC::UpdateTransmitState()
    [20] CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
    [21] CAI_BaseNPC::GetTracerType()
    [22] CBaseCombatCharacter::Spawn()
    [23] CAI_BaseNPC::Precache()
    [24] CBaseFlex::SetModel(char const*)
    [25] CBaseAnimating::OnNewModel()
    [26] CAI_BaseNPC::PostConstructor(char const*)
    [27] CBaseEntity::PostClientActive()
    [28] CBaseEntity::ParseMapData(CEntityMapData*)
    [29] CAI_BaseNPC::KeyValue(char const*, char const*)
    [30] CBaseEntity::KeyValue(char const*, float)
    [31] CBaseEntity::KeyValue(char const*, Vector const&)
    [32] CBaseEntity::GetKeyValue(char const*, char*, int)
    [33] CAI_BaseNPC::Activate()
    [34] CBaseEntity::SetParent(CBaseEntity*, int)
    [35] CAI_BaseNPC::ObjectCaps()
    [36] CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
    [37] CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
    [38] CAI_BaseNPC::DrawDebugGeometryOverlays()
    [39] CAI_BaseNPC::DrawDebugTextOverlays()
    [40] CAI_BaseNPC::Save(ISave&)
    [41] CAI_BaseNPC::Restore(IRestore&)
    [42] CAI_BasePhysicsFlyingBot::ShouldSavePhysics()
    [43] CBaseEntity::OnSave(IEntitySaveUtils*)
    [44] CAI_BaseNPC::OnRestore()
    [45] CBaseEntity::RequiredEdictIndex()
    [46] CBaseEntity::MoveDone()
    [47] CBaseEntity::Think()
    [48] CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
    [49] CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
    [50] CBaseAnimating::GetBaseAnimating()
    [51] CBaseEntity::GetResponseSystem()
    [52] CBaseEntity::DispatchResponse(char const*)
    [53] CBaseEntity::Classify()
    [54] CBaseEntity::DeathNotice(CBaseEntity*)
    [55] CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
    [56] CBaseEntity::GetAutoAimRadius()
    [57] CAI_BaseNPC::GetAutoAimCenter()
    [58] CBaseEntity::GetBeamTraceFilter()
    [59] CAI_BaseNPC::PassesDamageFilter(CTakeDamageInfo const&)
    [60] CAI_BaseNPC::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
    [61] CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
    [62] CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
    [63] CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
    [64] CBaseCombatCharacter::TakeHealth(float, int)
    [65] CBaseEntity::IsAlive()
    [66] CAI_BaseNPC::Event_Killed(CTakeDamageInfo const&)
    [67] CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [68] CBaseCombatCharacter::BloodColor()
    [69] CBaseEntity::IsTriggered(CBaseEntity*)
    [70] CAI_BaseNPC::IsNPC() const
    [71] CBaseCombatCharacter::MyCombatCharacterPointer()
    [72] CBaseEntity::MyNextBotPointer()
    [73] CBaseEntity::GetDelay()
    [74] CAI_BaseNPC::IsMoving()
    [75] CBaseEntity::DamageDecal(int, int)
    [76] CAI_BaseNPC::DecalTrace(CGameTrace*, char const*)
    [77] CAI_BaseNPC::ImpactTrace(CGameTrace*, int, char const*)
    [78] CBaseEntity::OnControls(CBaseEntity*)
    [79] CBaseEntity::HasTarget(string_t)
    [80] CBaseEntity::IsPlayer() const
    [81] CBaseEntity::IsNetClient() const
    [82] CAI_BaseNPC::IsTemplate()
    [83] CBaseEntity::IsBaseObject() const
    [84] CBaseEntity::IsBaseTrain() const
    [85] CBaseEntity::IsCombatItem() const
    [86] CBaseEntity::IsProjectileCollisionTarget() const
    [87] CBaseEntity::IsFuncLOD() const
    [88] CBaseEntity::IsBaseProjectile() const
    [89] CBaseEntity::IsBaseCombatWeapon() const
    [90] CBaseEntity::IsWearable() const
    [91] CBaseEntity::MyCombatWeaponPointer()
    [92] CBaseEntity::GetServerVehicle()
    [93] CBaseEntity::IsViewable()
    [94] CBaseCombatCharacter::ChangeTeam(int)
    [95] CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
    [96] CAI_BaseNPC::CanStandOn(CBaseEntity*) const
    [97] CBaseEntity::CanStandOn(edict_t*) const
    [98] CAI_BaseNPC::GetEnemy()
    [99] CAI_BaseNPC::GetEnemy() const
    [100] CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
    [101] CAI_BaseNPC::StartTouch(CBaseEntity*)
    [102] CBaseEntity::Touch(CBaseEntity*)
    [103] CBaseEntity::EndTouch(CBaseEntity*)
    [104] CBaseEntity::StartBlocked(CBaseEntity*)
    [105] CBaseEntity::Blocked(CBaseEntity*)
    [106] CBaseEntity::EndBlocked()
    [107] CBaseEntity::PhysicsSimulate()
    [108] CAI_BaseNPC::UpdateOnRemove()
    [109] CBaseEntity::StopLoopingSounds()
    [110] CBaseEntity::SUB_AllowedToFade()
    [111] CAI_BaseNPC::Teleport(Vector const*, QAngle const*, Vector const*)
    [112] CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
    [113] CAI_BaseNPC::MakeTracer(Vector const&, CGameTrace const&, int)
    [114] CBaseEntity::GetTracerAttachment()
    [115] CAI_BaseNPC::FireBullets(FireBulletsInfo_t const&)
    [116] CAI_BaseNPC::DoImpactEffect(CGameTrace&, int)
    [117] CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
    [118] CBaseEntity::Respawn()
    [119] CBaseEntity::IsLockedByMaster()
    [120] CBaseEntity::GetMaxHealth() const
    [121] CAI_BaseNPC::ModifyOrAppendCriteria(AI_CriteriaSet&)
    [122] CBaseEntity::NetworkStateChanged_m_iMaxHealth()
    [123] CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
    [124] CBaseEntity::NetworkStateChanged_m_iHealth()
    [125] CBaseEntity::NetworkStateChanged_m_iHealth(void*)
    [126] CAI_BaseNPC::NetworkStateChanged_m_lifeState()
    [127] CAI_BaseNPC::NetworkStateChanged_m_lifeState(void*)
    [128] CBaseEntity::NetworkStateChanged_m_takedamage()
    [129] CBaseEntity::NetworkStateChanged_m_takedamage(void*)
    [130] CBaseEntity::GetDamageType() const
    [131] CBaseEntity::GetDamage()
    [132] CBaseEntity::SetDamage(float)
    [133] CAI_BaseNPC::EyePosition()
    [134] CBaseEntity::EyeAngles()
    [135] CBaseEntity::LocalEyeAngles()
    [136] CBaseEntity::EarPosition()
    [137] CAI_BaseNPC::BodyTarget(Vector const&, bool)
    [138] CBaseEntity::HeadTarget(Vector const&)
    [139] CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
    [140] CBaseEntity::GetViewOffset() const
    [141] CBaseEntity::SetViewOffset(Vector const&)
    [142] CAI_BaseNPC::GetSmoothedVelocity()
    [143] CAI_BasePhysicsFlyingBot::GetVelocity(Vector*, Vector*)
    [144] CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
    [145] CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
    [146] CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
    [147] CBaseEntity::GetAttackDamageScale(CBaseEntity*)
    [148] CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
    [149] CBaseEntity::GetGroundVelocityToApply(Vector&)
    [150] CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
    [151] CBaseEntity::Splash()
    [152] CBaseEntity::WorldSpaceCenter() const
    [153] CBaseEntity::GetSoundEmissionOrigin() const
    [154] CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
    [155] CBaseEntity::IsDeflectable()
    [156] CBaseEntity::Deflected(CBaseEntity*, Vector&)
    [157] CAI_BasePhysicsFlyingBot::CreateVPhysics()
    [158] CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
    [159] CBaseEntity::VPhysicsDestroyObject()
    [160] CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
    [161] CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
    [162] CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
    [163] CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
    [164] CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
    [165] CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
    [166] CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
    [167] CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
    [168] CBaseEntity::VPhysicsIsFlesh()
    [169] CBaseEntity::HasPhysicsAttacker(float)
    [170] CAI_BaseNPC::PhysicsSolidMaskForEntity() const
    [171] CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
    [172] CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
    [173] CBaseAnimating::GetStepOrigin() const
    [174] CBaseAnimating::GetStepAngles() const
    [175] CBaseEntity::ShouldDrawWaterImpacts()
    [176] CBaseEntity::NetworkStateChanged_m_fFlags()
    [177] CBaseEntity::NetworkStateChanged_m_fFlags(void*)
    [178] CBaseEntity::NetworkStateChanged_m_nWaterLevel()
    [179] CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
    [180] CBaseEntity::NetworkStateChanged_m_hGroundEntity()
    [181] CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
    [182] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
    [183] CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
    [184] CBaseEntity::NetworkStateChanged_m_flFriction()
    [185] CBaseEntity::NetworkStateChanged_m_flFriction(void*)
    [186] CBaseEntity::NetworkStateChanged_m_vecVelocity()
    [187] CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
    [188] CBaseEntity::NetworkStateChanged_m_vecViewOffset()
    [189] CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
    [190] CBaseEntity::ShouldBlockNav() const
    [191] CBaseEntity::ShouldForceTransmitsForTeam(int)
    [192] CBaseEntity::IsTruceValidForEnt() const
    [193] CBaseEntity::GetDefaultItemChargeMeterValue() const
    [194] CBaseEntity::BCanCallVote()
    [195] CBaseAnimating::GetIdealSpeed() const
    [196] CBaseAnimating::GetIdealAccel() const
    [197] CBaseAnimatingOverlay::StudioFrameAdvance()
    [198] CBaseAnimating::SetSequence(int)
    [199] CAI_BaseNPC::IsActivityFinished()
    [200] CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
    [201] CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
    [202] CBaseAnimating::BecomeRagdollOnClient(Vector const&)
    [203] CBaseAnimating::IsRagdoll()
    [204] CBaseAnimating::CanBecomeRagdoll()
    [205] CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
    [206] CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
    [207] CBaseAnimating::SetupBones(matrix3x4_t*, int)
    [208] CBaseAnimating::CalculateIKLocks(float)
    [209] CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
    [210] CAI_BaseNPC::HandleAnimEvent(animevent_t*)
    [211] CAI_BaseNPC::PopulatePoseParameters()
    [212] CBaseAnimating::GetAttachment(int, matrix3x4_t&)
    [213] CBaseAnimating::InitBoneControllers()
    [214] CBaseAnimating::GetGroundSpeedVelocity()
    [215] CBaseAnimating::RefreshCollisionBounds()
    [216] CAI_BaseNPC::Ignite(float, bool, float, bool)
    [217] CBaseAnimating::IgniteLifetime(float)
    [218] CBaseAnimating::IgniteNumHitboxFires(int)
    [219] CBaseAnimating::IgniteHitboxFireScale(float)
    [220] CBaseAnimating::Extinguish()
    [221] CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
    [222] CBaseAnimating::SetLightingOrigin(CBaseEntity*)
    [223] CBaseFlex::SetViewtarget(Vector const&)
    [224] CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
    [225] CBaseFlex::ProcessSceneEvents()
    [226] CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
    [227] CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
    [228] CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
    [229] CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
    [230] CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
    [231] CBaseFlex::GetSpecialDSP()
    [232] CBaseCombatCharacter::GetPhysicsImpactDamageTable()
    [233] CBaseCombatCharacter::FInViewCone(CBaseEntity*)
    [234] CBaseCombatCharacter::FInViewCone(Vector const&)
    [235] CBaseCombatCharacter::FInAimCone(CBaseEntity*)
    [236] CAI_BaseNPC::FInAimCone(Vector const&)
    [237] CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
    [238] CBaseCombatCharacter::FindMissTarget()
    [239] CAI_BaseNPC::HandleInteraction(int, void*, CBaseCombatCharacter*)
    [240] CAI_BasePhysicsFlyingBot::BodyAngles()
    [241] CBaseCombatCharacter::BodyDirection2D()
    [242] CBaseCombatCharacter::BodyDirection3D()
    [243] CAI_BaseNPC::HeadDirection2D()
    [244] CAI_BaseNPC::HeadDirection3D()
    [245] CAI_BaseNPC::EyeDirection2D()
    [246] CAI_BaseNPC::EyeDirection3D()
    [247] CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
    [248] CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
    [249] CBaseCombatCharacter::IsHiddenByFog(float) const
    [250] CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
    [251] CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
    [252] CBaseCombatCharacter::GetFogObscuredRatio(float) const
    [253] CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
    [254] CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
    [255] CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
    [256] CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
    [257] CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
    [258] CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
    [259] CBaseCombatCharacter::GiveAmmo(int, int, bool)
    [260] CBaseCombatCharacter::RemoveAmmo(int, int)
    [261] CBaseCombatCharacter::RemoveAmmo(int, char const*)
    [262] CBaseCombatCharacter::GetAmmoCount(int) const
    [263] CAI_BaseNPC::NPC_TranslateActivity(Activity)
    [264] CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
    [265] CBaseCombatCharacter::Weapon_FrameUpdate()
    [266] CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
    [267] CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
    [268] CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
    [269] CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
    [270] CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
    [271] CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
    [272] CAI_BaseNPC::Weapon_ShootPosition()
    [273] CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
    [274] CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
    [275] CBaseCombatCharacter::Weapon_GetSlot(int) const
    [276] CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
    [277] CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
    [278] CBaseCombatCharacter::CanBecomeServerRagdoll()
    [279] CAI_BaseNPC::OnTakeDamage_Alive(CTakeDamageInfo const&)
    [280] CAI_BaseNPC::OnTakeDamage_Dying(CTakeDamageInfo const&)
    [281] CAI_BaseNPC::OnTakeDamage_Dead(CTakeDamageInfo const&)
    [282] CBaseCombatCharacter::GetAliveDuration() const
    [283] CAI_BaseNPC::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
    [284] CAI_BaseNPC::NotifyFriendsOfDamage(CBaseEntity*)
    [285] CBaseCombatCharacter::HasEverBeenInjured(int) const
    [286] CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
    [287] CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
    [288] CBaseCombatCharacter::GetDeathActivity()
    [289] CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
    [290] CBaseCombatCharacter::CorpseFade()
    [291] CBaseCombatCharacter::HasHumanGibs()
    [292] CBaseCombatCharacter::HasAlienGibs()
    [293] CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
    [294] CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
    [295] CAI_BaseNPC::Event_Gibbed(CTakeDamageInfo const&)
    [296] CBaseCombatCharacter::Event_Dying(CTakeDamageInfo const&)
    [297] CBaseCombatCharacter::Event_Dying()
    [298] CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
    [299] CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
    [300] CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
    [301] CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
    [302] CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
    [303] CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
    [304] CBaseCombatCharacter::IRelationType(CBaseEntity*)
    [305] CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
    [306] CBaseCombatCharacter::IsInAVehicle() const
    [307] CBaseCombatCharacter::GetVehicle()
    [308] CBaseCombatCharacter::GetVehicleEntity()
    [309] CBaseCombatCharacter::ExitVehicle()
    [310] CBaseCombatCharacter::RemoveAllWeapons()
    [311] CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
    [312] CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
    [313] CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
    [314] CBaseCombatCharacter::DoMuzzleFlash()
    [315] CAI_BaseNPC::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
    [316] CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
    [317] CAI_BaseNPC::AddClassRelationship(Class_T, Disposition_t, int)
    [318] CAI_BaseNPC::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
    [319] CBaseCombatCharacter::GetLastKnownArea() const
    [320] CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
    [321] CBaseCombatCharacter::ClearLastKnownArea()
    [322] CBaseCombatCharacter::UpdateLastKnownArea()
    [323] CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
    [324] CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
    [325] CBaseCombatCharacter::OnPursuedBy(INextBot*)
    [326] CBaseCombatCharacter::GetBossType() const
    [327] CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
    [328] CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
    [329] CAI_BaseNPC::NPCInit()
    [330] CAI_BaseNPC::PostNPCInit()
    [331] CAI_BaseNPC::StartNPC()
    [332] CAI_BaseNPC::CleanupOnDeath(CBaseEntity*, bool)
    [333] CAI_BaseNPC::CreateComponents()
    [334] CAI_BaseNPC::CreateSenses()
    [335] CAI_BaseNPC::CreateMoveProbe()
    [336] CAI_BaseNPC::CreateMotor()
    [337] CAI_BaseNPC::CreateLocalNavigator()
    [338] CAI_BaseNPC::CreateNavigator()
    [339] CAI_BaseNPC::CreatePathfinder()
    [340] CAI_BaseNPC::CreateTacticalServices()
    [341] CAI_BaseNPC::NPCThink()
    [342] CAI_BaseNPC::RunAI()
    [343] CAI_BaseNPC::GatherConditions()
    [344] CAI_BaseNPC::PrescheduleThink()
    [345] CAI_BaseNPC::PostscheduleThink()
    [346] CAI_BaseNPC::OnScheduleChange()
    [347] CAI_BaseNPC::OnStartSchedule(int)
    [348] CAI_BaseNPC::SelectSchedule()
    [349] CAI_BaseNPC::SelectFailSchedule(int, int, int)
    [350] CAI_BaseNPC::TranslateSchedule(int)
    [351] CAI_BasePhysicsFlyingBot::StartTask(Task_t const*)
    [352] CAI_BaseNPC::RunTask(Task_t const*)
    [353] CAI_BaseNPC::IsInterruptable()
    [354] CAI_BaseNPC::OnStartScene()
    [355] CAI_BaseNPC::ShouldPlayerAvoid()
    [356] CAI_BaseNPC::SetPlayerAvoidState()
    [357] CAI_BaseNPC::PlayerPenetratingVPhysics()
    [358] CAI_BaseNPC::ShouldAlwaysThink()
    [359] CAI_BaseNPC::LineOfSightDist(Vector const&, float)
    [360] CAI_BaseNPC::PostRunStopMoving()
    [361] CAI_BaseNPC::StartTask(Task_t*)
    [362] CAI_BaseNPC::RunTask(Task_t*)
    [363] CAI_BaseNPC::GetSchedule(int)
    [364] CAI_BaseNPC::GetLocalScheduleId(int)
    [365] CAI_BaseNPC::GetGlobalScheduleId(int)
    [366] CAI_BaseNPC::TaskFail(int)
    [367] CAI_BaseNPC::TaskName(int)
    [368] CAI_BaseNPC::GetLocalTaskId(int)
    [369] CAI_BaseNPC::GetSchedulingErrorName()
    [370] CAI_BaseNPC::LoadedSchedules()
    [371] CAI_BaseNPC::BuildScheduleTestBits()
    [372] CAI_BaseNPC::GetNewSchedule()
    [373] CAI_BaseNPC::GetFailSchedule()
    [374] CAI_BaseNPC::CanFlinch()
    [375] CAI_BaseNPC::CheckFlinches()
    [376] CAI_BaseNPC::PlayFlinchGesture()
    [377] CAI_BaseNPC::IsAllowedToDodge()
    [378] CAI_BaseNPC::SelectDeadSchedule()
    [379] CAI_BaseNPC::GetRunningBehavior()
    [380] CAI_BaseNPC::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
    [381] CAI_BaseNPC::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
    [382] CAI_BaseNPC::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
    [383] CAI_BaseNPC::AccessBehaviors()
    [384] CAI_BaseNPC::NumBehaviors()
    [385] CAI_BaseNPC::ConditionName(int)
    [386] CAI_BaseNPC::RemoveIgnoredConditions()
    [387] CAI_BaseNPC::SelectIdealState()
    [388] CAI_BaseNPC::ShouldGoToIdleState()
    [389] CAI_BaseNPC::OnStateChange(NPC_STATE, NPC_STATE)
    [390] CAI_BaseNPC::UpdateEfficiency(bool)
    [391] CAI_BaseNPC::Wake(bool)
    [392] CAI_BaseNPC::SetActivity(Activity)
    [393] CAI_BaseNPC::IsActivityMovementPhased(Activity)
    [394] CAI_BaseNPC::OnChangeActivity(Activity)
    [395] CAI_BaseNPC::QueryHearSound(CSound*)
    [396] CAI_BaseNPC::QuerySeeEntity(CBaseEntity*, bool)
    [397] CAI_BaseNPC::OnLooked(int)
    [398] CAI_BaseNPC::OnListened()
    [399] CAI_BaseNPC::OnSeeEntity(CBaseEntity*)
    [400] CAI_BaseNPC::ShouldNotDistanceCull()
    [401] CAI_BaseNPC::GetSoundInterests()
    [402] CAI_BaseNPC::GetSoundPriority(CSound*)
    [403] CAI_BaseNPC::GetBestSound(int)
    [404] CAI_BaseNPC::GetBestScent()
    [405] CAI_BaseNPC::HearingSensitivity()
    [406] CAI_BaseNPC::ShouldIgnoreSound(CSound*)
    [407] CAI_BaseNPC::ClearSenseConditions()
    [408] CAI_BaseNPC::BestEnemy()
    [409] CAI_BaseNPC::IsValidEnemy(CBaseEntity*)
    [410] CAI_BaseNPC::CanBeAnEnemyOf(CBaseEntity*)
    [411] CAI_BaseNPC::ShouldChooseNewEnemy()
    [412] CAI_BaseNPC::GatherEnemyConditions(CBaseEntity*)
    [413] CAI_BaseNPC::EnemyDistTolerance()
    [414] CAI_BaseNPC::StartTargetHandling(CBaseEntity*)
    [415] CAI_BaseNPC::CreateCustomTarget(Vector const&, float)
    [416] CAI_BaseNPC::ShouldPickADeathPose()
    [417] CAI_BaseNPC::AllowedToIgnite()
    [418] CAI_BaseNPC::GetGoalRepathTolerance(CBaseEntity*, GoalType_t, Vector const&, Vector const&)
    [419] CAI_BaseNPC::IsCommandable()
    [420] CAI_BaseNPC::IsPlayerAlly(CBasePlayer*)
    [421] CAI_BaseNPC::IsMedic()
    [422] CAI_BaseNPC::IsCommandMoving()
    [423] CAI_BaseNPC::ShouldAutoSummon()
    [424] CAI_BaseNPC::SetCommandGoal(Vector const&)
    [425] CAI_BaseNPC::ClearCommandGoal()
    [426] CAI_BaseNPC::OnTargetOrder()
    [427] CAI_BaseNPC::OnMoveOrder()
    [428] CAI_BaseNPC::IsValidCommandTarget(CBaseEntity*)
    [429] CAI_BaseNPC::OnMoveToCommandGoalFailed()
    [430] CAI_BaseNPC::GetSquadCommandRepresentative()
    [431] CAI_BaseNPC::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
    [432] CAI_BaseNPC::MoveOrder(Vector const&, CAI_BaseNPC**, int)
    [433] CAI_BaseNPC::CanBeUsedAsAFriend()
    [434] CAI_BaseNPC::CanRunAScriptedNPCInteraction(bool)
    [435] CAI_BaseNPC::CanPlaySequence(bool, int)
    [436] CAI_BaseNPC::CanPlaySentence(bool)
    [437] CAI_BaseNPC::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
    [438] CAI_BaseNPC::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
    [439] CAI_BaseNPC::FOkToMakeSound(int)
    [440] CAI_BaseNPC::JustMadeSound(int, float)
    [441] CAI_BaseNPC::DeathSound(CTakeDamageInfo const&)
    [442] CAI_BaseNPC::AlertSound()
    [443] CAI_BaseNPC::IdleSound()
    [444] CAI_BaseNPC::PainSound(CTakeDamageInfo const&)
    [445] CAI_BaseNPC::FearSound()
    [446] CAI_BaseNPC::LostEnemySound()
    [447] CAI_BaseNPC::FoundEnemySound()
    [448] CAI_BaseNPC::BarnacleDeathSound()
    [449] CAI_BaseNPC::SpeakSentence(int)
    [450] CAI_BaseNPC::ShouldPlayIdleSound()
    [451] CAI_BaseNPC::MakeAIFootstepSound(float, float)
    [452] CAI_BaseNPC::GetExpresser()
    [453] CAI_BaseNPC::CanRespondToEvent(char const*)
    [454] CAI_BaseNPC::RespondedTo(char const*, bool, bool)
    [455] CAI_BaseNPC::PlayerHasIlluminatedNPC(CBasePlayer*, float)
    [456] CAI_BaseNPC::CapabilitiesGet() const
    [457] CAI_BaseNPC::IsNavigationUrgent()
    [458] CAI_BaseNPC::ShouldFailNav(bool)
    [459] CAI_BaseNPC::ShouldBruteForceFailedNav()
    [460] CAI_BaseNPC::GetTimeToNavGoal()
    [461] CAI_BaseNPC::MovementCost(int, Vector const&, Vector const&, float*)
    [462] CAI_BaseNPC::CalcIdealYaw(Vector const&)
    [463] CAI_BaseNPC::MaxYawSpeed()
    [464] CAI_BaseNPC::AddFacingTarget(CBaseEntity*, float, float, float)
    [465] CAI_BaseNPC::AddFacingTarget(Vector const&, float, float, float)
    [466] CAI_BaseNPC::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
    [467] CAI_BaseNPC::GetFacingDirection(Vector&)
    [468] CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
    [469] CAI_BaseNPC::StepHeight() const
    [470] CAI_BaseNPC::GetMaxJumpSpeed() const
    [471] CAI_BaseNPC::GetJumpGravity() const
    [472] CAI_BaseNPC::OverrideMove(float)
    [473] CAI_BaseNPC::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
    [474] CAI_BaseNPC::IsUnusableNode(int, CAI_Hint*)
    [475] CAI_BaseNPC::ValidateNavGoal()
    [476] CAI_BaseNPC::IsCurTaskContinuousMove()
    [477] CAI_BaseNPC::IsValidMoveAwayDest(Vector const&)
    [478] CAI_BaseNPC::OnMovementFailed()
    [479] CAI_BaseNPC::OnMovementComplete()
    [480] CAI_BaseNPC::IsUnreachable(CBaseEntity*)
    [481] CAI_BaseNPC::CalcYawSpeed()
    [482] CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
    [483] CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
    [484] CAI_BaseNPC::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
    [485] CAI_BaseNPC::OnUpcomingPropDoor(AILocalMoveGoal_t*, CBasePropDoor*, float, AIMoveResult_t*)
    [486] CAI_BaseNPC::GetNodeViewOffset()
    [487] CAI_BaseNPC::EyeOffset(Activity)
    [488] CAI_BaseNPC::EyeLookTarget()
    [489] CAI_BaseNPC::AddLookTarget(CBaseEntity*, float, float, float)
    [490] CAI_BaseNPC::AddLookTarget(Vector const&, float, float, float)
    [491] CAI_BaseNPC::SetHeadDirection(Vector const&, float)
    [492] CAI_BaseNPC::MaintainLookTargets(float)
    [493] CAI_BaseNPC::ValidEyeTarget(Vector const&)
    [494] CAI_BaseNPC::FacingPosition()
    [495] CAI_BaseNPC::MaintainTurnActivity()
    [496] CAI_BaseNPC::AimGun()
    [497] CAI_BaseNPC::SetAim(Vector const&)
    [498] CAI_BaseNPC::RelaxAim()
    [499] CAI_BaseNPC::GetAlternateMoveShootTarget()
    [500] CAI_BaseNPC::InputOutsideTransition(inputdata_t&)
    [501] CAI_BaseNPC::InputInsideTransition(inputdata_t&)
    [502] CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)
    [503] CAI_BaseNPC::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
    [504] CAI_BaseNPC::ScheduledFollowPath(int, CBaseEntity*, Activity)
    [505] CAI_BaseNPC::GetEnemies()
    [506] CAI_BaseNPC::RemoveMemory()
    [507] CAI_BaseNPC::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
    [508] CAI_BaseNPC::GetReactionDelay(CBaseEntity*)
    [509] CAI_BaseNPC::CanHolsterWeapon()
    [510] CAI_BaseNPC::HolsterWeapon()
    [511] CAI_BaseNPC::UnholsterWeapon()
    [512] CAI_BaseNPC::OnRangeAttack1()
    [513] CAI_BaseNPC::OnUpdateShotRegulator()
    [514] CAI_BaseNPC::InitSquad()
    [515] CAI_BaseNPC::SquadSlotName(int)
    [516] CAI_BaseNPC::SetSquad(CAI_Squad*)
    [517] CAI_BaseNPC::IsSilentSquadMember() const
    [518] CAI_BaseNPC::FindCoverPos(CBaseEntity*, Vector*)
    [519] CAI_BaseNPC::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
    [520] CAI_BaseNPC::FindCoverPos(CSound*, Vector*)
    [521] CAI_BaseNPC::IsValidCover(Vector const&, CAI_Hint const*)
    [522] CAI_BaseNPC::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
    [523] CAI_BaseNPC::TestShootPosition(Vector const&, Vector const&)
    [524] CAI_BaseNPC::IsCoverPosition(Vector const&, Vector const&)
    [525] CAI_BaseNPC::CoverRadius()
    [526] CAI_BaseNPC::GetMaxTacticalLateralMovement()
    [527] CAI_BaseNPC::OnChangeHintGroup(string_t, string_t)
    [528] CAI_BaseNPC::ShouldFadeOnDeath()
    [529] CAI_BaseNPC::RangeAttack1Conditions(float, float)
    [530] CAI_BaseNPC::RangeAttack2Conditions(float, float)
    [531] CAI_BaseNPC::MeleeAttack1Conditions(float, float)
    [532] CAI_BaseNPC::MeleeAttack2Conditions(float, float)
    [533] CAI_BaseNPC::InnateRange1MinRange()
    [534] CAI_BaseNPC::InnateRange1MaxRange()
    [535] CAI_BaseNPC::OnBeginMoveAndShoot()
    [536] CAI_BaseNPC::OnEndMoveAndShoot()
    [537] CAI_BaseNPC::UseAttackSquadSlots()
    [538] CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)
    [539] CAI_BaseNPC::ClearAttackConditions()
    [540] CAI_BaseNPC::ShouldLookForBetterWeapon()
    [541] CAI_BaseNPC::GiveWeapon(string_t)
    [542] CAI_BaseNPC::OnGivenWeapon(CBaseCombatWeapon*)
    [543] CAI_BaseNPC::WeaponLOSCondition(Vector const&, Vector const&, bool)
    [544] CAI_BaseNPC::CurrentWeaponLOSCondition(Vector const&, bool)
    [545] CAI_BaseNPC::IsWaitingToRappel()
    [546] CAI_BaseNPC::BeginRappel()
    [547] CAI_BasePhysicsFlyingBot::TranslateNavGoal(CBaseEntity*, Vector&)
    [548] CAI_BaseNPC::GetDefaultNavGoalTolerance()
    [549] CAI_BaseNPC::FCanCheckAttacks()
    [550] CAI_BaseNPC::CheckAmmo()
    [551] CAI_BaseNPC::FValidateHintType(CAI_Hint*)
    [552] CAI_BaseNPC::GetHintActivity(short, Activity)
    [553] CAI_BaseNPC::GetHintDelay(short)
    [554] CAI_BaseNPC::GetCoverActivity(CAI_Hint*)
    [555] CAI_BaseNPC::GetReloadActivity(CAI_Hint*)
    [556] CAI_BaseNPC::SetTurnActivity()
    [557] CAI_BaseNPC::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
    [558] CAI_BaseNPC::PlayerInSpread(Vector const&, Vector const&, float, float, bool)
    [559] CAI_BaseNPC::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
    [560] CAI_BaseNPC::GetFlinchActivity(bool, bool)
    [561] CAI_BaseNPC::GetShootEnemyDir(Vector const&, bool)
    [562] CAI_BaseNPC::CollectShotStats(Vector const&, Vector const&)
    [563] CAI_BaseNPC::ShouldMoveAndShoot()
    [564] CAI_BaseNPC::IsLightDamage(CTakeDamageInfo const&)
    [565] CAI_BaseNPC::IsHeavyDamage(CTakeDamageInfo const&)
    [566] CAI_BaseNPC::PickupWeapon(CBaseCombatWeapon*)
    [567] CAI_BaseNPC::PickupItem(CBaseEntity*)
    [568] CAI_BaseNPC::NotifyDeadFriend(CBaseEntity*)
    [569] CAI_BaseNPC::CalcReasonableFacing(bool)
    [570] CAI_BaseNPC::IsValidReasonableFacing(Vector const&, float)
    [571] CAI_BaseNPC::GetReasonableFacingDist()
    [572] CAI_BaseNPC::GetClassScheduleIdSpace()
    [573] CAI_BaseNPC::GetSquadSlotDebugName(int)
    [574] CAI_BaseNPC::IsCrouching()
    [575] CAI_BaseNPC::Crouch()
    [576] CAI_BaseNPC::Stand()
    [577] CAI_BaseNPC::DesireCrouch()
    [578] CAI_BaseNPC::IsCrouchedActivity(Activity)
    [579] CAI_BaseNPC::GetCrouchEyeOffset()
    [580] CAI_BaseNPC::GetCrouchGunOffset()
    [581] CAI_BaseNPC::ReportAIState()
    [582] CAI_BaseNPC::ReportOverThinkLimit(float)
    [583] CAI_BaseNPC::ShouldProbeCollideAgainstEntity(CBaseEntity*)
    [584] CAI_BasePhysicsFlyingBot::MinGroundDist()
    [585] CAI_BasePhysicsFlyingBot::TurnHeadToTarget(float, Vector const&)
